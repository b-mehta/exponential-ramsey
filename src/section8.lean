/-
Copyright (c) 2023 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import section7

/-!
# Section 8
-/
namespace simple_graph

open_locale big_operators exponential_ramsey

open filter finset nat real asymptotics

variables {V : Type*} [decidable_eq V] [fintype V] {œá : top_edge_labelling V (fin 2)}
variables {k l : ‚Ñï} {ini : book_config œá} {i : ‚Ñï}

/-- force x to live in [a,b], and assume a ‚â§ b -/
noncomputable def clamp (a b x : ‚Ñù) : ‚Ñù :=
max a $ min b x

lemma clamp_le {a b x : ‚Ñù} (h : a ‚â§ b) : clamp a b x ‚â§ b := max_le h (min_le_left _ _)
lemma le_clamp {a b x : ‚Ñù} : a ‚â§ clamp a b x := le_max_left _ _

lemma clamp_eq {a b x : ‚Ñù} (h : a ‚â§ b) :
  clamp a b x = min b (max a x) :=
begin
  rw [clamp],
  rcases min_cases b x with (h' | h'),
  { rw [h'.1, max_eq_right h, min_eq_left (le_max_of_le_right h'.2)] },
  rw [h'.1, min_eq_right],
  exact max_le h h'.2.le,
end

lemma yael {a b x : ‚Ñù} (h : a ‚â§ b) : clamp a b x = a + min b x - min a x :=
begin
  rw [clamp],
  rcases min_cases b x with (h' | h'),
  { rw [h'.1, min_eq_left (h.trans h'.2), max_eq_right h],
    simp },
  rw [h'.1, eq_sub_iff_add_eq', min_add_max],
end

/-- p' in section 8 -/
noncomputable def p' (Œº : ‚Ñù) (k l : ‚Ñï) (ini : book_config œá) (i : ‚Ñï) (h : ‚Ñï) : ‚Ñù :=
if h = 1
  then min (q_function k ini.p h) (algorithm Œº k l ini i).p
  else clamp (q_function k ini.p (h - 1)) (q_function k ini.p h) (algorithm Œº k l ini i).p

lemma p'_le {Œº : ‚Ñù} {i h : ‚Ñï} : p' Œº k l ini i h ‚â§ q_function k ini.p h :=
begin
  rw [p'],
  split_ifs,
  { exact min_le_left _ _ },
  exact clamp_le (q_increasing (by simp))
end

lemma le_p' {Œº : ‚Ñù} {i h : ‚Ñï} (hh : 1 < h) : q_function k ini.p (h - 1) ‚â§ p' Œº k l ini i h :=
begin
  rw [p', if_neg hh.ne'],
  exact le_clamp
end

lemma min_add_clamp_self {a b x y : ‚Ñù} (h : a ‚â§ b) :
  (min a x - min a y) + (clamp a b x - clamp a b y) = min b x - min b y :=
by { rw [yael h, yael h], ring }

/-- Œî' in section 8 -/
noncomputable def Œî' (Œº : ‚Ñù) (k l : ‚Ñï) (ini : book_config œá) (i : ‚Ñï) (h : ‚Ñï) : ‚Ñù :=
p' Œº k l ini (i + 1) h - p' Œº k l ini i h

/-- Œî in section 8 -/
noncomputable def Œî (Œº : ‚Ñù) (k l : ‚Ñï) (ini : book_config œá) (i : ‚Ñï) : ‚Ñù :=
(algorithm Œº k l ini (i + 1)).p - (algorithm Œº k l ini i).p

local notation `X_` := Œª ·æ∏, by my_X
local notation `p_` := Œª ·æ∏, by my_p
local notation `h_` := Œª ·æ∏, by my_h
local notation `‚Ñõ` := by my_R
local notation `‚Ñ¨` := by my_B
local notation `ùíÆ` := by my_S
local notation `ùíü` := by my_D
local notation `t` := by my_t
local notation `s` := by my_s
local notation `Œµ` := by my_Œµ

lemma prop33_aux {Œº : ‚Ñù} {z : ‚Ñï} (h : 1 ‚â§ z) :
  ‚àë h in Icc 1 z, Œî' Œº k l ini i h =
    min (q_function k ini.p z) (algorithm Œº k l ini (i + 1)).p -
    min (q_function k ini.p z) (algorithm Œº k l ini i).p :=
begin
  cases z,
  { simpa using h },
  clear h,
  induction z with z ih,
  { simp [Œî', p'] },
  rw [nat.Icc_succ_left, ‚Üênat.Ico_succ_succ, nat.Ico_succ_right_eq_insert_Ico, sum_insert,
    nat.Ico_succ_right, ih, Œî', p', p', if_neg, if_neg, add_comm, nat.succ_sub_succ_eq_sub,
    nat.sub_zero, min_add_clamp_self],
  { exact q_increasing (nat.lt_succ_self _).le },
  { simp },
  { simp },
  { simp },
  { exact nat.succ_le_succ (by simp) },
end

/-- The maximum value of the height, for the sums in section 8 -/
noncomputable def max_height (k : ‚Ñï) : ‚Ñï :=
‚åä2 / ((k : ‚Ñù) ^ (-1 / 4 : ‚Ñù)) * log k‚åã‚Çä + 1

open filter

lemma max_height_large : ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí 1 < max_height k :=
begin
  filter_upwards [top_adjuster height_upper_bound] with l hl k hlk,
  rw [max_height, lt_add_iff_pos_left, nat.floor_pos],
  refine (hl k hlk 0 le_rfl 1 le_rfl).trans' _,
  rw nat.one_le_cast,
  exact one_le_height
end

lemma p_le_q' {k h : ‚Ñï} {p‚ÇÄ p : ‚Ñù} (hk : k ‚â† 0) :
  height k p‚ÇÄ p < h ‚Üí p ‚â§ q_function k p‚ÇÄ (h - 1) :=
begin
  intros hh,
  refine (q_increasing (nat.le_pred_of_lt hh)).trans' _,
  exact height_spec hk
end

lemma p_le_q :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ (ini : book_config œá) (h : ‚Ñï) (i : ‚Ñï), max_height k ‚â§ h ‚Üí
  (algorithm Œº k l ini i).p ‚â§ q_function k ini.p (h - 1) :=
begin
  filter_upwards [top_adjuster height_upper_bound, top_adjuster (eventually_gt_at_top 0)]
    with l hl' hk k hlk Œº n œá ini i h hh,
  refine p_le_q' (hk k hlk).ne' (hh.trans_lt' _),
  rw [‚Üê@nat.cast_lt ‚Ñù, max_height, nat.cast_add_one],
  exact (hl' _ hlk _ col_density_nonneg _ col_density_le_one).trans_lt (nat.lt_floor_add_one _),
  -- filter_upwards [top_adjuster (one_lt_q_function), max_height_large,
  --   top_adjuster (eventually_gt_at_top 0)] with l hl hl' hk
  --   k hlk n œá ini h hh i,
  -- refine col_density_le_one.trans _,
  -- refine (hl k hlk ini.p col_density_nonneg).trans (q_increasing _),
  -- rwa le_tsub_iff_right,
  -- exact hh.trans' (hl' k hlk).le
end

lemma p'_eq_of_ge' {Œº : ‚Ñù} {k h : ‚Ñï} (hk : k ‚â† 0) :
  height k ini.p (algorithm Œº k l ini i).p < h ‚Üí
    p' Œº k l ini i h = q_function k ini.p (h - 1) :=
begin
  intros hh,
  have h‚ÇÅ : q_function k ini.p (h - 1) ‚â§ q_function k ini.p h := q_increasing (nat.sub_le _ _),
  rw [p', clamp_eq h‚ÇÅ, max_eq_left, min_eq_right h‚ÇÅ, if_neg (one_le_height.trans_lt hh).ne'],
  exact p_le_q' hk hh,
end

lemma p'_eq_of_ge :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ (ini : book_config œá) (h i : ‚Ñï), max_height k ‚â§ h ‚Üí
  p' Œº k l ini i h = q_function k ini.p (h - 1) :=
begin
  filter_upwards [p_le_q, max_height_large] with l hl hl'
    k hlk Œº n œá ini h i hh,
  have h‚ÇÅ : q_function k ini.p (h - 1) ‚â§ q_function k ini.p h := q_increasing (nat.sub_le _ _),
  rw [p', clamp_eq h‚ÇÅ, max_eq_left (hl k hlk Œº n œá ini _ i hh), min_eq_right h‚ÇÅ, if_neg],
  exact ((hl' k hlk).trans_le hh).ne',
end

lemma Œî'_eq_of_ge :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ (ini : book_config œá) (h i : ‚Ñï), max_height k ‚â§ h ‚Üí
  Œî' Œº k l ini i h = 0 :=
begin
  filter_upwards [p'_eq_of_ge] with l hl k hlk Œº n œá ini h i hh,
  rw [Œî', hl _ hlk _ _ _ _ _ _ hh, hl _ hlk _ _ _ _ _ _ hh, sub_self],
end

lemma prop_33 :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ (ini : book_config œá),
  ‚àÄ i, ‚àë h in Ico 1 (max_height k), Œî' Œº k l ini i h = Œî Œº k l ini i :=
begin
  filter_upwards [p_le_q, max_height_large] with l hl hl'
    k hlk Œº n œá ini i,
  rw [max_height, nat.Ico_succ_right],
  rw [prop33_aux, Œî, min_eq_right, min_eq_right],
  { refine (hl k hlk _ _ _ _ _ _ le_rfl).trans _,
    exact q_increasing le_rfl },
  { refine (hl k hlk _ _ _ _ _ _ le_rfl).trans _,
    exact q_increasing le_rfl },
  specialize hl' k hlk,
  rw [max_height, lt_add_iff_pos_left] at hl',
  exact hl'
end

lemma p'_le_p'_of_p_le_p {Œº : ‚Ñù} {h i j : ‚Ñï}
  (hp : (algorithm Œº k l ini i).p ‚â§ (algorithm Œº k l ini j).p) :
  p' Œº k l ini i h ‚â§ p' Œº k l ini j h :=
begin
  rw [p', p'],
  split_ifs,
  { exact min_le_min le_rfl hp },
  exact max_le_max le_rfl (min_le_min le_rfl hp),
end

lemma Œî'_nonneg_of_p_le_p {Œº : ‚Ñù} {h : ‚Ñï}
  (hp : (algorithm Œº k l ini i).p ‚â§ (algorithm Œº k l ini (i + 1)).p) :
  0 ‚â§ Œî' Œº k l ini i h :=
begin
  rw [Œî', sub_nonneg],
  exact p'_le_p'_of_p_le_p hp
end

lemma Œî'_nonpos_of_p_le_p {Œº : ‚Ñù} {h : ‚Ñï}
  (hp : (algorithm Œº k l ini (i + 1)).p ‚â§ (algorithm Œº k l ini i).p) :
  Œî' Œº k l ini i h ‚â§ 0 :=
begin
  rw [Œî', sub_nonpos],
  exact p'_le_p'_of_p_le_p hp
end

lemma forall_nonneg_iff_nonneg :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ (ini : book_config œá),
  ‚àÄ i, (‚àÄ h, 1 ‚â§ h ‚Üí 0 ‚â§ Œî' Œº k l ini i h) ‚Üî 0 ‚â§ Œî Œº k l ini i :=
begin
  filter_upwards [prop_33] with l hl k hlk Œº n œá ini i,
  split,
  { intros hi,
    rw [‚Üêhl _ hlk],
    refine sum_nonneg _,
    intros j hj,
    rw [mem_Ico] at hj,
    exact hi _ hj.1 },
  intros hi j hj,
  rw [Œî, sub_nonneg] at hi,
  exact Œî'_nonneg_of_p_le_p hi
end

lemma forall_nonpos_iff_nonpos :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ (ini : book_config œá),
  ‚àÄ i, (‚àÄ h, 1 ‚â§ h ‚Üí Œî' Œº k l ini i h ‚â§ 0) ‚Üî Œî Œº k l ini i ‚â§ 0 :=
begin
  filter_upwards [prop_33] with l hl k hlk Œº n œá ini i,
  split,
  { intros hi,
    rw [‚Üêhl _ hlk],
    refine sum_nonpos (Œª j hj, _),
    rw [mem_Ico] at hj,
    exact hi _ hj.1 },
  intros hi j hj,
  rw [Œî, sub_nonpos] at hi,
  exact Œî'_nonpos_of_p_le_p hi
end

lemma prop_34 :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ (ini : book_config œá),
  ‚àë h in Ico 1 (max_height k), ‚àë i in range (final_step Œº k l ini),
    (Œî' Œº k l ini i h) / Œ±_function k h ‚â§ 2 / ((k : ‚Ñù) ^ (-1 / 4 : ‚Ñù)) * log k :=
begin
  filter_upwards [Œî'_eq_of_ge, top_adjuster (eventually_ge_at_top 1)] with l hl hk
    k hlk Œº n œá ini,
  refine (sum_le_card_nsmul _ _ 1 _).trans _,
  { intros h hh,
    rw [‚Üêsum_div, div_le_one (Œ±_pos _ _ (hk _ hlk))],
    simp only [Œî'],
    rw sum_range_sub (Œª x, p' Œº k l ini x h),
    dsimp,
    rw mem_Ico at hh,
    rw [p', p'],
    have : Œ±_function k h = q_function k ini.p h - q_function k ini.p (h - 1),
    { rw [‚Üênat.sub_add_cancel hh.1, Œ±_function_eq_q_diff, nat.add_sub_cancel] },
    rw this,
    refine sub_le_sub _ _,
    { split_ifs,
      { exact min_le_left _ _ },
      exact clamp_le (q_increasing (by simp)) },
    split_ifs,
    { rw [h_1, q_function_zero, algorithm_zero, min_eq_right],
      refine (q_increasing zero_le_one).trans_eq' _,
      rw [q_function_zero] },
    exact le_clamp },
  rw [nat.card_Ico, max_height, nat.add_sub_cancel, nat.smul_one_eq_coe],
  refine nat.floor_le _,
  have : 0 ‚â§ log k := log_nonneg (nat.one_le_cast.2 (hk k hlk)),
  positivity
end

lemma eight_two (Œº‚ÇÅ p‚ÇÄ : ‚Ñù) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº ‚â§ Œº‚ÇÅ ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ (ini : book_config œá), p‚ÇÄ ‚â§ ini.p ‚Üí
  (1 - k ^ (- 1 / 8 : ‚Ñù) : ‚Ñù) *
    ‚àë i in moderate_steps Œº k l ini, (1 - blue_X_ratio Œº k l ini i) / blue_X_ratio Œº k l ini i ‚â§
      ‚àë h in Ico 1 (max_height k),
        ‚àë i in density_steps Œº k l ini, Œî' Œº k l ini i h / Œ±_function k h :=
begin
  have tt : tendsto (coe : ‚Ñï ‚Üí ‚Ñù) at_top at_top := tendsto_coe_nat_at_top_at_top,
  have hh‚ÇÅ : (0 : ‚Ñù) < 1 / 8, by norm_num,
  have hh‚ÇÇ : (0 : ‚Ñù) < 2 / 3, by norm_num,
  have hh‚ÇÉ : (0 : ‚Ñù) < 1 / 16, by norm_num,
  have hh‚ÇÑ : (0 : ‚Ñù) < 3 / 4, by norm_num,
  have := ((tendsto_rpow_neg_at_top hh‚ÇÅ).comp tt).eventually (eventually_le_nhds hh‚ÇÇ),
  have h' := ((tendsto_rpow_neg_at_top hh‚ÇÉ).comp tt).eventually (eventually_le_nhds hh‚ÇÑ),
  -- have := ((tendsto_rpow_at_top hh‚ÇÅ).comp tt).eventually
  --   (eventually_le_floor (2 / 3) (by norm_num1)),
  filter_upwards [five_three_left Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ, five_two Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    top_adjuster (eventually_gt_at_top 0), prop_33, top_adjuster this,
    top_adjuster h'] with l h‚ÇÖ‚ÇÉ hl‚ÇÖ‚ÇÇ hk h33 h‚ÇÅ‚Çà h‚ÇÉ‚ÇÑ
    k hlk Œº hŒºu n œá ini hini,
  specialize h‚ÇÖ‚ÇÉ k hlk Œº hŒºu n œá ini hini,
  suffices : ‚àÄ i ‚àà moderate_steps Œº k l ini,
    (1 - k ^ (- 1 / 8 : ‚Ñù) : ‚Ñù) * (1 - blue_X_ratio Œº k l ini i) / blue_X_ratio Œº k l ini i ‚â§
      ‚àë h in Ico 1 (max_height k), Œî' Œº k l ini i h / Œ±_function k h,
  { simp only [mul_sum, mul_div_assoc'],
    refine (sum_le_sum this).trans _,
    rw sum_comm,
    refine sum_le_sum (Œª i hi, sum_le_sum_of_subset_of_nonneg (filter_subset _ _) _),
    intros j hj hj',
    exact div_nonneg (Œî'_nonneg_of_p_le_p (h‚ÇÖ‚ÇÉ j hj)) (Œ±_nonneg _ _) },
  intros i hi,
  rw [moderate_steps, mem_filter] at hi,
  have : ‚àÄ h ‚àà Ico 1 (max_height k),
    Œî' Œº k l ini i h / Œ±_function k (height k ini.p (algorithm Œº k l ini (i + 1)).p) ‚â§
    Œî' Œº k l ini i h / Œ±_function k h,
  { intros h hh,
    cases le_or_lt h (height k ini.p (algorithm Œº k l ini (i + 1)).p) with hp hp,
    { exact div_le_div_of_le_left (Œî'_nonneg_of_p_le_p (h‚ÇÖ‚ÇÉ _ hi.1)) (Œ±_pos _ _ (hk k hlk))
        (Œ±_increasing hp) },
    suffices : Œî' Œº k l ini i h = 0,
    { simp [this] },
    rw [Œî', p'_eq_of_ge' (hk k hlk).ne' hp, p'_eq_of_ge' (hk k hlk).ne' _, sub_self],
    refine hp.trans_le' _,
    exact height_mono (hk k hlk).ne' (h‚ÇÖ‚ÇÉ i hi.1) },
  refine (sum_le_sum this).trans' _,
  clear this,
  rw [‚Üêsum_div, h33 _ hlk],
  clear h33,
  obtain ‚ü®hŒ≤, hŒ≤'‚ü© := hl‚ÇÖ‚ÇÇ k hlk Œº hŒºu n œá ini hini i hi.1,
  clear hl‚ÇÖ‚ÇÇ,
  rw [mul_div_assoc, le_div_iff (Œ±_pos _ _ (hk k hlk))],
  refine hŒ≤'.trans' _,
  rw [mul_right_comm, mul_right_comm _ (_ / _)],
  refine mul_le_mul_of_nonneg_right _ _,
  swap,
  { refine div_nonneg _ hŒ≤.le,
    rw sub_nonneg,
    exact blue_X_ratio_le_one },
  dsimp at hi,
  have : Œ±_function k (height k ini.p (algorithm Œº k l ini (i + 1)).p) =
    (1 + Œµ) ^
      (height k ini.p (algorithm Œº k l ini (i + 1)).p - height k ini.p (algorithm Œº k l ini i).p) *
      Œ±_function k (height k ini.p (algorithm Œº k l ini i).p),
  { rw [Œ±_function, Œ±_function, mul_div_assoc', mul_left_comm, ‚Üêpow_add, tsub_add_tsub_cancel],
    { exact height_mono (hk k hlk).ne' (h‚ÇÖ‚ÇÉ _ hi.1) },
    exact one_le_height },
  rw [this, ‚Üêmul_assoc],
  refine mul_le_mul_of_nonneg_right _ (Œ±_nonneg _ _),
  rw [‚Üêrpow_nat_cast, nat.cast_sub],
  swap,
  exact (height_mono (hk k hlk).ne' (h‚ÇÖ‚ÇÉ _ hi.1)),
  have hk‚Çà : (0 : ‚Ñù) ‚â§ 1 - k ^ (-1 / 8 : ‚Ñù),
  { rw sub_nonneg,
    refine rpow_le_one_of_one_le_of_nonpos _ _,
    { rw [nat.one_le_cast, nat.succ_le_iff],
      exact hk k hlk },
    norm_num1 },
  refine (mul_le_mul_of_nonneg_left (rpow_le_rpow_of_exponent_le _ hi.2) _).trans _,
  { simp only [le_add_iff_nonneg_right], positivity },
  { exact hk‚Çà },
  have : (1 : ‚Ñù) - Œµ = (1 - k ^ (- 1 / 8 : ‚Ñù)) * (1 + k ^ (- 1 / 8 : ‚Ñù)),
  { rw [one_sub_mul, mul_one_add, ‚Üêsub_sub, add_sub_cancel, ‚Üêrpow_add],
    { norm_num },
    rw [nat.cast_pos],
    exact hk k hlk },
  rw this,
  refine mul_le_mul_of_nonneg_left _ _,
  swap,
  { exact hk‚Çà },
  rw add_comm,
  refine (rpow_le_rpow _ (add_one_le_exp Œµ) _).trans _,
  { exact add_nonneg (by positivity) zero_le_one },
  { positivity },
  rw [‚Üêexp_one_rpow, ‚Üêrpow_mul (exp_pos _).le, exp_one_rpow, ‚Üêrpow_add],
  swap,
  { rw nat.cast_pos,
    exact hk k hlk },
  norm_num1,
  rw [‚Üêneg_div, ‚Üêneg_div, ‚Üêle_log_iff_exp_le],
  swap,
  { exact add_pos_of_pos_of_nonneg zero_lt_one (by positivity) },
  have := quick_calculation,
  have : (k : ‚Ñù) ^ (- 1 / 8 : ‚Ñù) ‚â§ 2 / 3,
  { rw neg_div, exact h‚ÇÅ‚Çà k hlk },
  refine (log_inequality (by positivity) this).trans' _,
  refine (mul_le_mul_of_nonneg_left quick_calculation (by positivity)).trans' _,
  have : (k : ‚Ñù) ^ (- 3 / 16 : ‚Ñù) = k ^ (- 1 / 8 : ‚Ñù) * k ^ (- (1 / 16) : ‚Ñù),
  { rw [‚Üêrpow_add],
    { norm_num },
    rw nat.cast_pos,
    exact hk k hlk },
  rw this,
  refine mul_le_mul_of_nonneg_left _ (by positivity),
  exact h‚ÇÉ‚ÇÑ k hlk
end

lemma eight_three :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ (ini : book_config œá),
  - (1 + Œµ : ‚Ñù) ^ 2 * (red_steps Œº k l ini).card ‚â§
      ‚àë h in Ico 1 (max_height k), ‚àë i in ‚Ñõ, Œî' Œº k l ini i h / Œ±_function k h :=
begin
  filter_upwards [forall_nonneg_iff_nonneg, forall_nonpos_iff_nonpos, six_five_red,
    top_adjuster (eventually_gt_at_top 0), prop_33] with
    l hl‚ÇÅ hl‚ÇÇ hl‚ÇÉ hk h‚ÇÉ‚ÇÉ
    k hlk Œº n œá ini,
  specialize hl‚ÇÅ k hlk Œº n œá ini,
  specialize hl‚ÇÇ k hlk Œº n œá ini,
  specialize hl‚ÇÉ k hlk Œº n œá ini,
  rw [mul_comm, ‚Üênsmul_eq_mul, sum_comm],
  refine card_nsmul_le_sum _ _ _ _,
  intros i hi,
  cases le_or_lt 0 (Œî Œº k l ini i) with hŒî hŒî,
  { refine (sum_nonneg _).trans' (neg_nonpos_of_nonneg (by positivity)),
    intros j hj,
    rw mem_Ico at hj,
    exact div_nonneg ((hl‚ÇÅ i).2 hŒî j hj.1) (Œ±_nonneg _ _) },
  specialize hl‚ÇÉ i hi,
  have : ‚àÄ h, 1 ‚â§ h ‚Üí h < height k ini.p (algorithm Œº k l ini i).p - 2 ‚Üí Œî' Œº k l ini i h = 0,
  { intros h hh‚ÇÅ hh‚ÇÇ,
    have := hh‚ÇÇ.trans_le hl‚ÇÉ,
    rw [Œî'],
    have h‚ÇÅ : p' Œº k l ini (i + 1) h = q_function k ini.p h,
    { have h‚ÇÅ : q_function k ini.p h ‚â§ (algorithm Œº k l ini (i + 1)).p,
      { refine (q_increasing (nat.le_pred_of_lt (hh‚ÇÇ.trans_le hl‚ÇÉ))).trans (q_height_lt_p _).le,
        exact hh‚ÇÅ.trans_lt this },
      rw [p', clamp, min_eq_left h‚ÇÅ, max_eq_right (q_increasing (nat.sub_le _ _))],
      simp },
    have h‚ÇÇ : p' Œº k l ini i h = q_function k ini.p h,
    { have h‚ÇÇ : q_function k ini.p h ‚â§ (algorithm Œº k l ini i).p,
      { exact (q_increasing (nat.le_pred_of_lt (hh‚ÇÇ.trans_le (nat.sub_le _ _)))).trans
          (q_height_lt_p (hh‚ÇÅ.trans_lt (hh‚ÇÇ.trans_le (nat.sub_le _ _)))).le },
      rw [p', clamp, min_eq_left h‚ÇÇ, max_eq_right (q_increasing (nat.sub_le _ _))],
      simp },
    rw [h‚ÇÅ, h‚ÇÇ, sub_self] },
  have : ‚àÄ h ‚àà Ico 1 (max_height k),
    (1 + Œµ : ‚Ñù) ^ 2 * Œî' Œº k l ini i h / Œ±_function k (height k ini.p (algorithm Œº k l ini i).p) ‚â§
    Œî' Œº k l ini i h / Œ±_function k h,
  { intros h hh,
    rw [mem_Ico] at hh,
    cases lt_or_le h (height k ini.p (algorithm Œº k l ini i).p - 2) with hp hp,
    { rw [this h hh.1 hp, mul_zero, zero_div, zero_div] },
    rw [div_le_div_iff (Œ±_pos _ _ (hk k hlk)) (Œ±_pos _ _ (hk k hlk)), mul_comm (_ ^ 2 : ‚Ñù),
      mul_assoc],
    refine mul_le_mul_of_nonpos_left _ ((hl‚ÇÇ _).2 hŒî.le _ hh.1),
    rw tsub_le_iff_right at hp,
    refine (Œ±_increasing hp).trans_eq _,
    rw [Œ±_function, Œ±_function, mul_div_assoc', mul_left_comm, ‚Üêpow_add],
    congr' 3,
    rw [add_comm 2, tsub_add_eq_add_tsub hh.1] },
  refine (sum_le_sum this).trans' _,
  rw [‚Üêsum_div, ‚Üêmul_sum, h‚ÇÉ‚ÇÉ k hlk, le_div_iff (Œ±_pos _ _ (hk k hlk)), neg_mul, ‚Üêmul_neg],
  refine mul_le_mul_of_nonneg_left _ (sq_nonneg _),
  rw [Œî, neg_le_sub_iff_le_add, ‚Üêsub_le_iff_le_add],
  exact six_four_red hi,
end

lemma eight_four_first_step (Œº : ‚Ñù) :
  ‚àë h in Ico 1 (max_height k), ‚àë i in big_blue_steps Œº k l ini,
    (Œî' Œº k l ini (i - 1) h + Œî' Œº k l ini i h) / Œ±_function k h ‚â§
  ‚àë h in Ico 1 (max_height k), ‚àë i in degree_steps Œº k l ini ‚à™ big_blue_steps Œº k l ini,
    Œî' Œº k l ini i h / Œ±_function k h :=
begin
  refine sum_le_sum _,
  intros h hh,
  rw sum_union ((degree_steps_disjoint_big_blue_steps_union_red_or_density_steps).mono_right _),
  swap,
  { exact subset_union_left _ _ },
  simp only [add_div, sum_add_distrib, add_le_add_iff_right],
  have : big_blue_steps Œº k l ini ‚äÜ (degree_steps Œº k l ini).map ‚ü®_, add_left_injective 1‚ü©,
  { intros i hi,
    have := big_blue_steps_sub_one_mem_degree hi,
    rw [finset.mem_map, function.embedding.coe_fn_mk],
    exact ‚ü®i - 1, this.2, nat.sub_add_cancel this.1‚ü© },
  refine (sum_le_sum_of_subset_of_nonneg this _).trans _,
  { simp only [finset.mem_map, function.embedding.coe_fn_mk, forall_exists_index,
      forall_apply_eq_imp_iff‚ÇÇ, add_tsub_cancel_right],
    intros i hi hi',
    refine div_nonneg _ (Œ±_nonneg _ _),
    refine Œî'_nonneg_of_p_le_p _,
    exact six_four_degree hi },
  rw [sum_map],
  simp only [function.embedding.coe_fn_mk, add_tsub_cancel_right],
end

lemma eq_39_end :
  ‚àÄ·∂† k : ‚Ñï in at_top, (1 + (k : ‚Ñù) ^ (-1 / 4 : ‚Ñù)) ^ (2 * (k : ‚Ñù) ^ (1 / 8 : ‚Ñù)) ‚â§ 2 :=
begin
  have h‚Çà : (0 : ‚Ñù) < 1 / 8 := by norm_num1,
  have h‚ÇÇ : 0 < log 2 / 2 := div_pos (log_pos (by norm_num1)) (by norm_num1),
  have := (tendsto_rpow_neg_at_top h‚Çà).eventually (eventually_le_nhds h‚ÇÇ),
  have := tendsto_coe_nat_at_top_at_top.eventually this,
  filter_upwards [this] with k hk,
  rw [add_comm],
  refine (rpow_le_rpow _ (add_one_le_exp _) (by positivity)).trans _,
  { positivity },
  rw [‚Üêexp_one_rpow, ‚Üêrpow_mul (exp_pos _).le, exp_one_rpow, ‚Üêle_log_iff_exp_le two_pos,
    mul_left_comm, ‚Üêrpow_add' (nat.cast_nonneg _), ‚Üêle_div_iff' (zero_lt_two' ‚Ñù)],
  swap, { norm_num1 },
  norm_num1,
  exact hk
end

lemma eq_39 (Œº‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ (ini : book_config œá),
  ‚àÄ i ‚àà ‚Ñ¨, Œî Œº k l ini (i - 1) + Œî Œº k l ini i < 0 ‚Üí
  (‚àÄ h, Œî' Œº k l ini (i - 1) h + Œî' Œº k l ini i h ‚â§ 0) ‚Üí
  (-2 : ‚Ñù) * k ^ (1 / 8 : ‚Ñù) ‚â§
    ‚àë h in Ico 1 (max_height k), (Œî' Œº k l ini (i - 1) h + Œî' Œº k l ini i h) / Œ±_function k h :=
begin
  filter_upwards [six_five_blue Œº‚ÇÄ hŒº‚ÇÄ, top_adjuster (eventually_gt_at_top 0),
    prop_33, top_adjuster eq_39_end] with l h‚ÇÜ‚ÇÖ hk h‚ÇÉ‚ÇÉ hl
    k hlk Œº hŒºl n œá hœá ini i hi hh' hh,
  obtain ‚ü®hi‚ÇÅ, hi‚ÇÇ‚ü© := big_blue_steps_sub_one_mem_degree hi,
  specialize h‚ÇÜ‚ÇÖ k hlk Œº hŒºl n œá ini i hi,
  specialize h‚ÇÉ‚ÇÉ k hlk Œº n œá ini,
  have : ‚àÄ h : ‚Ñï, 1 ‚â§ h ‚Üí
    (h : ‚Ñù) < height k ini.p (algorithm Œº k l ini (i - 1)).p - 2 * k ^ (1 / 8 : ‚Ñù) ‚Üí
    Œî' Œº k l ini (i - 1) h + Œî' Œº k l ini i h = 0,
  { intros h hh‚ÇÅ hh‚ÇÇ,
    have := hh‚ÇÇ.trans_le h‚ÇÜ‚ÇÖ,
    rw nat.cast_lt at this,
    rw [Œî', Œî', nat.sub_add_cancel hi‚ÇÅ, sub_add_sub_cancel'],
    have h‚ÇÅ : p' Œº k l ini (i + 1) h = q_function k ini.p h,
    { have h‚ÇÅ : q_function k ini.p h ‚â§ (algorithm Œº k l ini (i + 1)).p,
      { refine (q_increasing (nat.le_pred_of_lt this)).trans (q_height_lt_p _).le,
        exact hh‚ÇÅ.trans_lt this },
      rw [p', clamp, min_eq_left h‚ÇÅ, max_eq_right (q_increasing (nat.sub_le _ _))],
      simp },
    have h‚ÇÇ : p' Œº k l ini (i - 1) h = q_function k ini.p h,
    { have h‚ÇÄ : h < height k ini.p (algorithm Œº k l ini (i - 1)).p,
      { rw ‚Üê@nat.cast_lt ‚Ñù,
        refine hh‚ÇÇ.trans_le _,
        simp only [one_div, sub_le_self_iff, zero_le_mul_left, zero_lt_bit0, zero_lt_one],
        positivity },
      have h‚ÇÇ : q_function k ini.p h ‚â§ (algorithm Œº k l ini (i - 1)).p,
      { exact (q_increasing (nat.le_pred_of_lt h‚ÇÄ)).trans (q_height_lt_p (hh‚ÇÅ.trans_lt h‚ÇÄ)).le },
      rw [p', clamp, min_eq_left h‚ÇÇ, max_eq_right (q_increasing (nat.sub_le _ _))],
      simp },
    rw [h‚ÇÅ, h‚ÇÇ, sub_self] },
  have : ‚àÄ h ‚àà Ico 1 (max_height k),
    (1 + Œµ : ‚Ñù) ^ (2 * k ^ (1 / 8 : ‚Ñù) : ‚Ñù) * (Œî' Œº k l ini (i - 1) h + Œî' Œº k l ini i h) /
      Œ±_function k (height k ini.p (algorithm Œº k l ini (i - 1)).p) ‚â§
    (Œî' Œº k l ini (i - 1) h + Œî' Œº k l ini i h) / Œ±_function k h,
  { intros h hh',
    rw [mem_Ico] at hh',
    cases lt_or_le (h : ‚Ñù) (height k ini.p (algorithm Œº k l ini (i - 1)).p - 2 * k ^ (1 / 8 : ‚Ñù))
      with hp hp,
    { rw [this h hh'.1 hp, mul_zero, zero_div, zero_div] },
    rw [div_le_div_iff (Œ±_pos _ _ (hk k hlk)) (Œ±_pos _ _ (hk k hlk)), mul_assoc, mul_left_comm],
    refine mul_le_mul_of_nonpos_left _ (hh _),
    rw [Œ±_function, Œ±_function, mul_div_assoc', mul_left_comm, ‚Üêrpow_add_nat, ‚Üêrpow_nat_cast],
    swap,
    { positivity },
    refine div_le_div_of_le (nat.cast_nonneg _) _,
    refine mul_le_mul_of_nonneg_left _ (by positivity),
    refine rpow_le_rpow_of_exponent_le _ _,
    { simp only [le_add_iff_nonneg_right],
      positivity },
    rwa [nat.cast_sub hh'.1, nat.cast_sub one_le_height, nat.cast_one, add_sub_assoc',
      sub_le_sub_iff_right, ‚Üêsub_le_iff_le_add'] },
  refine (sum_le_sum this).trans' _,
  rw [‚Üêsum_div, ‚Üêmul_sum, sum_add_distrib, h‚ÇÉ‚ÇÉ, h‚ÇÉ‚ÇÉ, le_div_iff (Œ±_pos _ _ (hk k hlk)), mul_assoc,
    neg_mul, ‚Üêmul_neg],
  refine mul_le_mul_of_nonpos_of_nonneg' (hl k hlk) _ two_pos.le hh'.le,
  rw [Œî, Œî, nat.sub_add_cancel hi‚ÇÅ, sub_add_sub_cancel', le_sub_iff_add_le', ‚Üêsub_eq_add_neg],
  exact six_four_blue (hŒº‚ÇÄ.trans_le hŒºl) hi
end

lemma eight_four (Œº‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ (ini : book_config œá),
  - (2 : ‚Ñù) * k ^ (7 / 8 : ‚Ñù) ‚â§
      ‚àë h in Ico 1 (max_height k), ‚àë i in degree_steps Œº k l ini ‚à™ big_blue_steps Œº k l ini,
        Œî' Œº k l ini i h / Œ±_function k h :=
begin
  filter_upwards [four_three hŒº‚ÇÄ, top_adjuster (eventually_gt_at_top 0), eq_39 Œº‚ÇÄ hŒº‚ÇÄ] with
    l h‚ÇÑ‚ÇÉ hk‚ÇÄ hl
    k hlk Œº hŒºl n œá hœá ini,
  specialize h‚ÇÑ‚ÇÉ k hlk Œº hŒºl n œá hœá ini,
  specialize hl k hlk Œº hŒºl n œá hœá ini,
  refine (eight_four_first_step _).trans' _,
  rw sum_comm,
  have : - (2 : ‚Ñù) * k ^ (7 / 8 : ‚Ñù) ‚â§ (big_blue_steps Œº k l ini).card ‚Ä¢ (-2 * k ^ (1 / 8 : ‚Ñù)),
  { rw [neg_mul, neg_mul, smul_neg, neg_le_neg_iff, nsmul_eq_mul],
    have := h‚ÇÑ‚ÇÉ.trans (rpow_le_rpow (nat.cast_nonneg _) (nat.cast_le.2 hlk) (by norm_num1)),
    refine (mul_le_mul_of_nonneg_right this (by positivity)).trans_eq _,
    rw [mul_left_comm, ‚Üêrpow_add],
    { norm_num },
    rw nat.cast_pos,
    exact hk‚ÇÄ k hlk },
  refine this.trans (card_nsmul_le_sum _ _ _ _),
  intros i hi,
  have := big_blue_steps_sub_one_mem_degree hi,
  cases le_or_lt 0 (Œî Œº k l ini (i - 1) + Œî Œº k l ini i) with hŒî hŒî,
  { have : ‚àÄ h, 0 ‚â§ (Œî' Œº k l ini (i - 1) h + Œî' Œº k l ini i h) / Œ±_function k h,
    { intros h,
      refine div_nonneg _ (Œ±_nonneg _ _),
      rw [Œî', Œî', nat.sub_add_cancel this.1, sub_add_sub_cancel', sub_nonneg],
      rw [Œî, Œî, nat.sub_add_cancel this.1, sub_add_sub_cancel', sub_nonneg] at hŒî,
      exact p'_le_p'_of_p_le_p hŒî },
    refine (sum_nonneg (Œª i _, this i)).trans' _,
    rw [neg_mul],
    simp only [one_div, right.neg_nonpos_iff, zero_le_mul_left, zero_lt_bit0, zero_lt_one],
    positivity },
  have : ‚àÄ h, Œî' Œº k l ini (i - 1) h + Œî' Œº k l ini i h ‚â§ 0,
  { intro h,
    rw [Œî', Œî', nat.sub_add_cancel this.1, sub_add_sub_cancel', sub_nonpos],
    rw [Œî, Œî, nat.sub_add_cancel this.1, sub_add_sub_cancel', sub_neg] at hŒî,
    exact p'_le_p'_of_p_le_p hŒî.le },
  exact hl i hi hŒî this,
end

lemma eq_41 (Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº‚ÇÄ) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí Œº ‚â§ Œº‚ÇÅ ‚Üí ‚àÄ n : ‚Ñï,
  ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ (ini : book_config œá), p‚ÇÄ ‚â§ ini.p ‚Üí
  (1 - k ^ (-1 / 8 : ‚Ñù) : ‚Ñù) *
    ‚àë i in moderate_steps Œº k l ini, (1 - blue_X_ratio Œº k l ini i) / blue_X_ratio Œº k l ini i -
    (1 + k ^ (-1 / 4 : ‚Ñù)) ^ 2 * (red_steps Œº k l ini).card - 2 * k ^ (7 / 8 : ‚Ñù) ‚â§
    2 / ((k : ‚Ñù) ^ (-1 / 4 : ‚Ñù)) * log k :=
begin
  filter_upwards [prop_34, eight_two Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ, eight_three, eight_four Œº‚ÇÄ hŒº‚ÇÄ] with
    l h‚ÇÉ‚ÇÑ h‚Çà‚ÇÇ h‚Çà‚ÇÉ h‚Çà‚ÇÑ
    k hlk Œº hŒºl hŒºu n œá hœá ini hini,
  specialize h‚ÇÉ‚ÇÑ k hlk Œº n œá ini,
  specialize h‚Çà‚ÇÇ k hlk Œº hŒºu n œá ini hini,
  specialize h‚Çà‚ÇÉ k hlk Œº n œá ini,
  specialize h‚Çà‚ÇÑ k hlk Œº hŒºl n œá hœá ini,
  refine h‚ÇÉ‚ÇÑ.trans' _,
  rw [sub_eq_add_neg, sub_eq_add_neg, ‚Üêneg_mul, ‚Üêneg_mul],
  refine (add_le_add_three h‚Çà‚ÇÇ h‚Çà‚ÇÉ h‚Çà‚ÇÑ).trans _,
  rw [‚Üêsum_add_distrib, ‚Üêsum_add_distrib],
  refine sum_le_sum _,
  intros h hh,
  rw [‚Üêsum_union red_steps_disjoint_density_steps.symm, union_comm, red_steps_union_density_steps,
    union_comm, ‚Üêunion_partial_steps, union_assoc, ‚Üêsum_union],
  rw disjoint_union_right,
  refine ‚ü®big_blue_steps_disjoint_red_or_density_steps.symm, _‚ü©,
  refine degree_steps_disjoint_big_blue_steps_union_red_or_density_steps.symm.mono_left _,
  exact subset_union_right _ _
end

-- k ‚â• 1.6
lemma polynomial_ineq_aux : ‚àÄ·∂† k : ‚Ñù in at_top,
  2 * k ^ 4 + 1 + k ^ 6 + 2 * k ^ 5 ‚â§ 2 * k ^ 7 :=
begin
  filter_upwards [eventually_ge_at_top (1.6 : ‚Ñù)] with k hk,
  have h‚ÇÑ : 2 * k ^ 4 ‚â§ 2 * (5 / 8) ^ 3 * k ^ 7,
  { rw mul_assoc,
    refine mul_le_mul_of_nonneg_left _ (by norm_num1),
    rw [‚Üêdiv_le_iff', div_pow, div_div_eq_mul_div, mul_div_assoc, ‚Üêdiv_pow,
      (show 7 = 4 + 3, by norm_num1), pow_add],
    { refine mul_le_mul_of_nonneg_left (pow_le_pow_of_le_left (by norm_num1) hk _) _,
      exact pow_nonneg (by positivity) _ },
    positivity },
  have h‚ÇÜ : k ^ 6 ‚â§ (5 / 8) * k ^ 7,
  { rw [‚Üêdiv_le_iff', div_div_eq_mul_div, mul_div_assoc, pow_succ' _ 6],
    { refine mul_le_mul_of_nonneg_left hk _,
      exact pow_nonneg (by positivity) _ },
    positivity },
  have h‚ÇÖ : 2 * k ^ 5 ‚â§ 2 * (5 / 8) ^ 2 * k ^ 7,
  { rw mul_assoc,
    refine mul_le_mul_of_nonneg_left _ (by norm_num1),
    rw [‚Üêdiv_le_iff', div_pow, div_div_eq_mul_div, mul_div_assoc, ‚Üêdiv_pow,
      (show 7 = 5 + 2, by norm_num1), pow_add],
    { refine mul_le_mul_of_nonneg_left (pow_le_pow_of_le_left (by norm_num1) hk _) _,
      exact pow_nonneg (by positivity) _ },
    positivity },
  have h‚ÇÅ : 1 ‚â§ (27 / 256) * k ^ 7,
  { rw [‚Üêdiv_le_iff', div_div_eq_mul_div, one_mul],
    { exact (pow_le_pow_of_le_left (by norm_num1) hk 7).trans' (by norm_num) },
    { norm_num1 } },
  refine (add_le_add (add_le_add (add_le_add h‚ÇÑ h‚ÇÅ) h‚ÇÜ) h‚ÇÖ).trans_eq _,
  ring_nf,
end

-- k ‚â• 1.6 ^ 16
lemma polynomial_ineq : ‚àÄ·∂† k : ‚Ñï in at_top,
  (0 : ‚Ñù) < 1 - k ^ (- 1 / 8 : ‚Ñù) ‚Üí
  (1 + k ^ (-1 / 4 : ‚Ñù) : ‚Ñù) ^ 2 / (1 - k ^ (-1 / 8 : ‚Ñù)) ‚â§ 1 + 2 * k ^ (- 1 / 16 : ‚Ñù) :=
begin
  have h : (0 : ‚Ñù) < 1 / 16 := by norm_num,
  have := (tendsto_rpow_at_top h).comp tendsto_coe_nat_at_top_at_top,
  have := this.eventually polynomial_ineq_aux,
  filter_upwards [this, eventually_gt_at_top 0] with k hk‚ÇÇ hk‚ÇÄ hk,
  have hk' : (0 : ‚Ñù) < k,
  { rwa nat.cast_pos },
  rw [div_le_iff hk],
  rw [add_sq, mul_one_sub, one_add_mul, one_pow, ‚Üêadd_sub, add_assoc, add_le_add_iff_left, mul_one,
    ‚Üêrpow_nat_cast, ‚Üêrpow_mul (nat.cast_nonneg k), le_sub_iff_add_le, mul_assoc,
    ‚Üêadd_assoc],
  refine le_of_mul_le_mul_right _ (rpow_pos_of_pos hk' (1 / 2)),
  simp only [add_mul, mul_assoc, ‚Üêrpow_add hk'],
  dsimp at hk‚ÇÇ,
  simp only [‚Üêrpow_nat_cast, ‚Üêrpow_mul (nat.cast_nonneg k)] at hk‚ÇÇ,
  norm_num [rpow_zero],
  norm_num at hk‚ÇÇ,
  exact hk‚ÇÇ
end

-- bound is implicit because of the is_o, but should work for k >= 5/3 ^ 16
lemma log_ineq : ‚àÄ·∂† k : ‚Ñï in at_top,
  (0 : ‚Ñù) < 1 - k ^ (- 1 / 8 : ‚Ñù) ‚Üí
  (2 / k ^ (-1 / 4 : ‚Ñù) * log k + 2 * k ^ (7 / 8 : ‚Ñù) : ‚Ñù) / (1 - k ^ (-1 / 8 : ‚Ñù)) ‚â§
    2 * k ^ (15 / 16 : ‚Ñù) :=
begin
  have h‚ÇÅ : (0 : ‚Ñù) < 1 / 25 := by norm_num,
  have h‚ÇÇ := (is_o_log_rpow_at_top (by norm_num : (0 : ‚Ñù) < 11 / 16)).bound h‚ÇÅ,
  have tt : tendsto (coe : ‚Ñï ‚Üí ‚Ñù) at_top at_top := tendsto_coe_nat_at_top_at_top,
  filter_upwards [eventually_gt_at_top 1, tt.eventually h‚ÇÇ,
    tt.eventually_ge_at_top ((5/3) ^ 16)] with k hk‚ÇÅ hk‚ÇÇ hk‚ÇÖ hk,
  have hk' : (0 : ‚Ñù) < k,
  { rw nat.cast_pos,
    exact hk‚ÇÅ.trans_le' zero_le_one },
  have hk‚ÇÅ‚ÇÜ : (k : ‚Ñù) ^ (-1 / 16 : ‚Ñù) ‚â§ (3 / 5 : ‚Ñù),
  { rw [neg_div, ‚Üêdiv_neg, one_div, rpow_inv_le_iff_of_neg hk', rpow_neg, ‚Üêinv_rpow, inv_div],
    { refine hk‚ÇÖ.trans_eq' _,
      norm_num1 },
    { norm_num1 },
    { norm_num1 },
    { norm_num1 },
    { norm_num1 } },
  rw [div_le_iff hk, neg_div, rpow_neg (nat.cast_nonneg _), div_inv_eq_mul, mul_assoc, ‚Üêmul_add,
    mul_assoc, mul_one_sub],
  refine mul_le_mul_of_nonneg_left _ two_pos.le,
  rw [le_sub_iff_add_le],
  have h‚ÇÅ : (k : ‚Ñù) ^ (1 / 4 : ‚Ñù) * log k ‚â§ (1 / 25) * k ^ (15 / 16 : ‚Ñù),
  { rw [norm_of_nonneg (log_nonneg (nat.one_le_cast.2 hk‚ÇÅ.le)), norm_of_nonneg
      (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _)] at hk‚ÇÇ,
    refine (mul_le_mul_of_nonneg_left hk‚ÇÇ (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _)).trans_eq _,
    rw [mul_left_comm, ‚Üêrpow_add hk'],
    norm_num1,
    refl },
  have h‚ÇÇ : (k : ‚Ñù) ^ (7 / 8 : ‚Ñù) ‚â§ (3 / 5) * k ^ (15 / 16 : ‚Ñù),
  { refine (mul_le_mul_of_nonneg_right hk‚ÇÅ‚ÇÜ (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _)).trans' _,
    rw [‚Üêrpow_add hk'],
    norm_num1,
    refl },
  have h‚ÇÉ : (k : ‚Ñù) ^ (15 / 16 : ‚Ñù) * k ^ (- 1 / 8 : ‚Ñù) ‚â§ (3 / 5) ^ 2 * k ^ (15 / 16 : ‚Ñù),
  { rw [mul_comm],
    refine mul_le_mul_of_nonneg_right _ (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _),
    refine (pow_le_pow_of_le_left (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _) hk‚ÇÅ‚ÇÜ _).trans' _,
    rw [‚Üêrpow_nat_cast, ‚Üêrpow_mul hk'.le],
    norm_num1,
    refl },
  refine (add_le_add_three h‚ÇÅ h‚ÇÇ h‚ÇÉ).trans _,
  rw [‚Üêadd_mul, ‚Üêadd_mul],
  norm_num,
end

lemma eq_42 (Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº‚ÇÄ) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí Œº ‚â§ Œº‚ÇÅ ‚Üí ‚àÄ n : ‚Ñï,
  ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ (ini : book_config œá), p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àë i in moderate_steps Œº k l ini, (1 - blue_X_ratio Œº k l ini i) / blue_X_ratio Œº k l ini i ‚â§
    (red_steps Œº k l ini).card + 4 * k ^ (15 / 16 : ‚Ñù) :=
begin
  filter_upwards [eq_41 Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ, top_adjuster (eventually_gt_at_top 1),
    top_adjuster (eventually_gt_at_top 0),
    top_adjuster polynomial_ineq, top_adjuster log_ineq] with l hl hk hk‚ÇÄ hk‚ÇÅ hk‚ÇÇ
    k hlk Œº hŒºl hŒºu n œá hœá ini hini,
  specialize hl k hlk Œº hŒºl hŒºu n œá hœá ini hini,
  have : (0 : ‚Ñù) < 1 - k ^ (- 1 / 8 : ‚Ñù),
  { rw [sub_pos],
    refine rpow_lt_one_of_one_lt_of_neg _ _,
    { rw nat.one_lt_cast,
      exact hk k hlk },
    norm_num1 },
  specialize hk‚ÇÅ k hlk this,
  specialize hk‚ÇÇ k hlk this,
  rw [sub_le_iff_le_add, sub_le_iff_le_add, ‚Üêle_div_iff' this, add_div, ‚Üêdiv_mul_eq_mul_div] at hl,
  refine hl.trans _,
  refine (add_le_add hk‚ÇÇ (mul_le_mul_of_nonneg_right hk‚ÇÅ (nat.cast_nonneg _))).trans _,
  rw [add_comm, one_add_mul, add_assoc, add_le_add_iff_left, ‚Üêle_sub_iff_add_le, ‚Üêsub_mul],
  refine (mul_le_mul_of_nonneg_left (nat.cast_le.2 (four_four_red Œº hœá ini))
    (by positivity)).trans _,
  rw [mul_assoc, ‚Üêrpow_add_one],
  { norm_num },
  rw nat.cast_ne_zero,
  exact (hk‚ÇÄ _ hlk).ne'
end

lemma one_div_sq_le_beta (Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº‚ÇÄ) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí Œº ‚â§ Œº‚ÇÅ ‚Üí ‚àÄ n : ‚Ñï,
  ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ (ini : book_config œá), p‚ÇÄ ‚â§ ini.p ‚Üí
  (1 : ‚Ñù) / k ^ 2 ‚â§ beta Œº k l ini :=
begin
  filter_upwards [five_three_right Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ, top_adjuster (eventually_gt_at_top 0),
    eventually_ge_at_top (‚åàsqrt (1 / Œº‚ÇÄ)‚åâ‚Çä),
    blue_X_ratio_pos Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ] with
    l hŒ≤ hl hlŒº hŒ≤‚ÇÄ
    k hlk Œº hŒºl hŒºu n œá ini hini,
  specialize hŒ≤ k hlk Œº hŒºu n œá ini hini,
  specialize hŒ≤‚ÇÄ k hlk Œº hŒºu n œá ini hini,
  specialize hl k hlk,
  rw beta,
  split_ifs,
  { refine hŒºl.trans' _,
    rw [one_div_le, ‚Üêsqrt_le_left, ‚Üênat.ceil_le],
    { exact hlŒº.trans hlk },
    { exact nat.cast_nonneg _ },
    { positivity },
    { exact hŒº‚ÇÄ } },
  have : (moderate_steps Œº k l ini).nonempty,
  { rwa nonempty_iff_ne_empty },
  rw [‚Üêdiv_eq_mul_inv, div_le_div_iff, one_mul],
  rotate,
  { positivity },
  { refine sum_pos _ this,
    intros i hi,
    rw one_div_pos,
    exact hŒ≤‚ÇÄ i (filter_subset _ _ hi) },
  rw ‚Üênsmul_eq_mul,
  refine sum_le_card_nsmul _ _ _ _,
  intros i hi,
  rw [one_div_le],
  { exact hŒ≤ i (filter_subset _ _ hi) },
  { exact hŒ≤‚ÇÄ i (filter_subset _ _ hi) },
  { positivity }
end

lemma beta_pos (Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº‚ÇÄ) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí Œº ‚â§ Œº‚ÇÅ ‚Üí ‚àÄ n : ‚Ñï,
  ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ (ini : book_config œá), p‚ÇÄ ‚â§ ini.p ‚Üí
  0 < beta Œº k l ini :=
begin
  filter_upwards [one_div_sq_le_beta Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    top_adjuster (eventually_gt_at_top 0)] with l hŒ≤ hl
    k hlk Œº hŒºl hŒºu n œá ini hini,
  specialize hŒ≤ k hlk Œº hŒºl hŒºu n œá ini hini,
  refine hŒ≤.trans_lt' _,
  specialize hl k hlk,
  positivity
end

lemma eight_five (Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº‚ÇÄ) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí Œº ‚â§ Œº‚ÇÅ ‚Üí ‚àÄ n : ‚Ñï,
  ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ (ini : book_config œá), p‚ÇÄ ‚â§ ini.p ‚Üí
  ((density_steps Œº k l ini).card : ‚Ñù) ‚â§
    beta Œº k l ini / (1 - beta Œº k l ini) * (red_steps Œº k l ini).card +
      7 / (1 - Œº‚ÇÅ) * k ^ (15 / 16 : ‚Ñù) :=
begin
  filter_upwards [eq_42 Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ, seven_five Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    blue_X_ratio_pos Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ, beta_le_Œº Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    beta_pos Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ] with
    l h‚ÇÑ‚ÇÇ h‚Çá‚ÇÖ hŒ≤ hŒ≤' hŒ≤‚ÇÄ
    k hlk Œº hŒºl hŒºu n œá hœá ini hini,
  specialize h‚ÇÑ‚ÇÇ k hlk Œº hŒºl hŒºu n œá hœá ini hini,
  specialize h‚Çá‚ÇÖ k hlk Œº hŒºl hŒºu n œá hœá ini hini,
  specialize hŒ≤ k hlk Œº hŒºu n œá ini hini,
  specialize hŒ≤' k hlk Œº hŒºl hŒºu n œá ini hini,
  specialize hŒ≤‚ÇÄ k hlk Œº hŒºl hŒºu n œá ini hini,
  have : ‚àë (i : ‚Ñï) in moderate_steps Œº k l ini,
    (1 - blue_X_ratio Œº k l ini i) / blue_X_ratio Œº k l ini i =
    ‚àë i in moderate_steps Œº k l ini, 1 / blue_X_ratio Œº k l ini i - (moderate_steps Œº k l ini).card,
  { simp only [sub_div, sum_sub_distrib, sub_right_inj],
    rw [‚Üênat.smul_one_eq_coe, ‚Üêsum_const _],
    refine sum_congr rfl (Œª i hi, _),
    rw div_self (hŒ≤ i (filter_subset _ _ hi)).ne' },
  rw [this] at h‚ÇÑ‚ÇÇ,
  have : moderate_steps Œº k l ini ‚äÜ density_steps Œº k l ini := filter_subset _ _,
  replace h‚ÇÑ‚ÇÇ := h‚ÇÑ‚ÇÇ.trans' (sub_le_sub_left (nat.cast_le.2 (card_le_of_subset this)) _),
  have hŒº' : Œº < 1 := hŒºu.trans_lt hŒº‚ÇÅ,
  cases (moderate_steps Œº k l ini).eq_empty_or_nonempty with hS hS,
  { rw [hS, sdiff_empty] at h‚Çá‚ÇÖ,
    refine h‚Çá‚ÇÖ.trans (le_add_of_nonneg_of_le _ _),
    { refine mul_nonneg (div_nonneg (beta_nonneg (hŒº‚ÇÄ.trans_le hŒºl)) _) (nat.cast_nonneg _),
      exact sub_nonneg_of_le (hŒ≤'.trans hŒº'.le) },
    refine mul_le_mul_of_nonneg_right _ (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _),
    refine (le_div_self (by norm_num1) (sub_pos_of_lt hŒº‚ÇÅ) _).trans' (by norm_num1),
    rw [sub_le_self_iff],
    linarith only [hŒº‚ÇÄ, hŒºl, hŒºu] },
  have : (4 * beta Œº k l ini + 3) / (1 - beta Œº k l ini) ‚â§ 7 / (1 - Œº‚ÇÅ),
  { refine div_le_div (by norm_num1) _ (sub_pos_of_lt hŒº‚ÇÅ) _,
    { linarith only [hŒ≤', hŒºu, hŒº‚ÇÅ] },
    exact sub_le_sub_left (hŒ≤'.trans hŒºu) _ },
  refine (add_le_add_left (mul_le_mul_of_nonneg_right this (by positivity)) _).trans' _,
  rw [div_mul_eq_mul_div, div_mul_eq_mul_div, div_add_div_same, le_div_iff],
  swap,
  { exact sub_pos_of_lt (hŒ≤'.trans_lt (hŒºu.trans_lt hŒº‚ÇÅ)) },
  rw [add_mul, ‚Üêadd_assoc, mul_assoc, mul_left_comm, ‚Üêmul_add],
  refine (add_le_add_left h‚Çá‚ÇÖ _).trans' _,
  rw [moderate_steps, cast_card_sdiff (filter_subset _ _), ‚Üêmoderate_steps, mul_one_sub,
    add_sub_assoc', add_comm, add_sub_assoc, sub_eq_add_neg, add_le_add_iff_left,
    le_sub_iff_add_le', ‚Üêsub_eq_add_neg],
  refine (mul_le_mul_of_nonneg_left h‚ÇÑ‚ÇÇ (beta_nonneg (hŒº‚ÇÄ.trans_le hŒºl))).trans' _,
  rw [mul_sub, mul_comm, sub_le_sub_iff_right, ‚Üêdiv_le_iff' hŒ≤‚ÇÄ, div_eq_mul_one_div, beta_prop hS,
    one_div, mul_inv_cancel_left‚ÇÄ],
  rwa [nat.cast_ne_zero, ‚Üêpos_iff_ne_zero, card_pos],
end

-- the little-o function is -7 / (1 - Œº‚ÇÅ) * k ^ (- 1 / 32)
lemma eight_six (Œº‚ÇÅ : ‚Ñù) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) :
  ‚àÉ f : ‚Ñï ‚Üí ‚Ñù, f =o[at_top] (Œª i, (1 : ‚Ñù)) ‚àß
  ‚àÄ Œº‚ÇÄ p‚ÇÄ : ‚Ñù, 0 < Œº‚ÇÄ ‚Üí 0 < p‚ÇÄ ‚Üí
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí Œº ‚â§ Œº‚ÇÅ ‚Üí ‚àÄ n : ‚Ñï,
  ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ (ini : book_config œá), p‚ÇÄ ‚â§ ini.p ‚Üí
  (k : ‚Ñù) ^ (31 / 32 : ‚Ñù) ‚â§ (density_steps Œº k l ini).card ‚Üí
  (1 + f k) *
    ((density_steps Œº k l ini).card / ((density_steps Œº k l ini).card + (red_steps Œº k l ini).card))
    ‚â§ beta Œº k l ini :=
begin
  refine ‚ü®Œª k, (-7 / (1 - Œº‚ÇÅ)) * k ^ (- (1 / 32) : ‚Ñù), _, _‚ü©,
  { refine is_o.const_mul_left _ _,
    have : - (1 / 32 : ‚Ñù) < 0 := by norm_num,
    refine ((is_o_rpow_rpow this).comp_tendsto tendsto_coe_nat_at_top_at_top).congr_right _,
    simp },
  intros Œº‚ÇÄ p‚ÇÄ hŒº‚ÇÄ hp‚ÇÄ,
  filter_upwards [eight_five Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ, beta_pos Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    beta_le_Œº Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ, top_adjuster (eventually_gt_at_top 0)] with l hl hŒ≤ hŒ≤Œº hk‚ÇÄ
    k hlk Œº hŒºl hŒºu n œá hœá ini hini hs,
  specialize hl k hlk Œº hŒºl hŒºu n œá hœá ini hini,
  specialize hŒ≤ k hlk Œº hŒºl hŒºu n œá ini hini,
  specialize hŒ≤Œº k hlk Œº hŒºl hŒºu n œá ini hini,
  specialize hk‚ÇÄ k hlk,
  have hk‚ÇÄ' : (0 : ‚Ñù) < k := nat.cast_pos.2 hk‚ÇÄ,
  rw [div_mul_eq_mul_div, ‚Üêsub_le_iff_le_add, le_div_iff, mul_one_sub] at hl,
  swap,
  { rw sub_pos,
    exact hŒ≤Œº.trans_lt (hŒºu.trans_lt hŒº‚ÇÅ) },
  have h‚ÇÅ : (1 + (-7 / (1 - Œº‚ÇÅ)) * k ^ (- (1 / 32) : ‚Ñù)) * (density_steps Œº k l ini).card ‚â§
    ((density_steps Œº k l ini).card : ‚Ñù) - 7 / (1 - Œº‚ÇÅ) * k ^ (15 / 16 : ‚Ñù),
  { rw [neg_div, neg_mul, ‚Üêsub_eq_add_neg, one_sub_mul, sub_le_sub_iff_left],
    refine (mul_le_mul_of_nonneg_left hs _).trans' _,
    { refine mul_nonneg (div_nonneg (by norm_num1) (sub_nonneg_of_le hŒº‚ÇÅ.le)) _,
      exact rpow_nonneg_of_nonneg (nat.cast_nonneg _) _ },
    rw [mul_assoc, ‚Üêrpow_add hk‚ÇÄ'],
    norm_num },
  have h‚ÇÇ : ((density_steps Œº k l ini).card - 7 / (1 - Œº‚ÇÅ) * k ^ (15 / 16 : ‚Ñù) : ‚Ñù) *
    beta Œº k l ini ‚â§ (density_steps Œº k l ini).card * beta Œº k l ini,
  { refine mul_le_mul_of_nonneg_right _ (beta_nonneg (hŒº‚ÇÄ.trans_le hŒºl)),
    rw sub_le_self_iff,
    refine mul_nonneg (div_nonneg (by norm_num1) (sub_nonneg_of_le hŒº‚ÇÅ.le)) _,
    exact rpow_nonneg_of_nonneg (nat.cast_nonneg _) _ },
  replace hl := (sub_le_sub h‚ÇÅ h‚ÇÇ).trans hl,
  rw [sub_le_iff_le_add', mul_comm _ (beta Œº k l ini), ‚Üêmul_add] at hl,
  rw mul_div_assoc',
  exact div_le_of_nonneg_of_le_mul (by positivity) (beta_nonneg (hŒº‚ÇÄ.trans_le hŒºl)) hl,
end

end simple_graph
