/-
Copyright (c) 2023 Bhavik Mehta. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Bhavik Mehta
-/
import section5

/-!
# Section 6
-/
namespace simple_graph

open_locale big_operators exponential_ramsey

open filter finset real

variables {V : Type*} [decidable_eq V] [fintype V] {œá : top_edge_labelling V (fin 2)}
variables {k l : ‚Ñï} {ini : book_config œá} {i : ‚Ñï}

/-- dumb thing -/
meta def my_p : tactic unit := tactic.to_expr ```((algorithm Œº k l ini ·æ∏).p) >>= tactic.exact
/-- dumb thing -/
meta def my_p' : tactic unit := tactic.to_expr ```(Œª i, (algorithm Œº k l ini i).p) >>= tactic.exact
/-- dumb thing -/
meta def my_R : tactic unit := tactic.to_expr ```(red_steps Œº k l ini) >>= tactic.exact
/-- dumb thing -/
meta def my_B : tactic unit := tactic.to_expr ```(big_blue_steps Œº k l ini) >>= tactic.exact
/-- dumb thing -/
meta def my_S : tactic unit := tactic.to_expr ```(density_steps Œº k l ini) >>= tactic.exact
/-- dumb thing -/
meta def my_D : tactic unit := tactic.to_expr ```(degree_steps Œº k l ini) >>= tactic.exact
/-- dumb thing -/
meta def my_Œµ : tactic unit := tactic.to_expr ```((k : ‚Ñù) ^ (- 1 / 4 : ‚Ñù)) >>= tactic.exact

local notation `p_` := Œª ·æ∏, by my_p
local notation `‚Ñõ` := by my_R
local notation `‚Ñ¨` := by my_B
local notation `ùíÆ` := by my_S
local notation `ùíü` := by my_D
local notation `Œµ` := by my_Œµ

lemma six_four_red {Œº : ‚Ñù} (hi : i ‚àà red_steps Œº k l ini) :
  (algorithm Œº k l ini i).p - Œ±_function k (height k ini.p (algorithm Œº k l ini i).p) ‚â§
    (algorithm Œº k l ini (i + 1)).p :=
begin
  change (_ : ‚Ñù) ‚â§ red_density œá _ _,
  rw [red_applied hi, book_config.red_step_basic_X, book_config.red_step_basic_Y],
  have hi' := hi,
  simp only [red_steps, mem_image, mem_filter, exists_prop, subtype.coe_mk, mem_attach,
    true_and, subtype.exists, exists_and_distrib_right, exists_eq_right] at hi',
  obtain ‚ü®hx, hx'‚ü© := hi',
  exact hx'
end

lemma six_four_density (Œº‚ÇÅ p‚ÇÄl : ‚Ñù) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) (hp‚ÇÄl : 0 < p‚ÇÄl) :
  ‚àÄ·∂† l : ‚Ñï in at_top,
  ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº ‚â§ Œº‚ÇÅ ‚Üí
  ‚àÄ n : ‚Ñï,
  ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ ini : book_config œá,
    p‚ÇÄl ‚â§ ini.p ‚Üí
  ‚àÄ i : ‚Ñï,
    i ‚àà density_steps Œº k l ini ‚Üí
  (algorithm Œº k l ini i).p ‚â§ (algorithm Œº k l ini (i + 1)).p :=
five_three_left _ _ hŒº‚ÇÅ hp‚ÇÄl

lemma six_four_density' (Œº‚ÇÅ p‚ÇÄ : ‚Ñù) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº ‚â§ Œº‚ÇÅ ‚Üí ‚àÄ n, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àÄ i : ‚Ñï, i ‚àà ùíÆ ‚Üí p_ i ‚â§ p_ (i + 1) :=
six_four_density Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ

lemma increase_average {Œ± : Type*} {s : finset Œ±} {f : Œ± ‚Üí ‚Ñù} {k : ‚Ñù}
  (hk : k ‚â§ (‚àë i in s, f i) / s.card) :
  (‚àë i in s, f i) / s.card ‚â§
    (‚àë i in s.filter (Œª j, k ‚â§ f j), f i) / (s.filter (Œª j, k ‚â§ f j)).card :=
begin
  classical,
  rcases s.eq_empty_or_nonempty with rfl | hs,
  { rw [filter_empty] },
  have hs' : (0 : ‚Ñù) < s.card,
  { rwa [nat.cast_pos, card_pos] },
  have : (s.filter (Œª j, k ‚â§ f j)).nonempty,
  { rw [nonempty_iff_ne_empty, ne.def, filter_eq_empty_iff],
    intro h,
    simp only [not_le] at h,
    rw le_div_iff' hs' at hk,
    refine (sum_lt_sum_of_nonempty hs h).not_le _,
    rwa [sum_const, nsmul_eq_mul] },
  have hs'' : (0 : ‚Ñù) < (s.filter (Œª j, k ‚â§ f j)).card,
  { rwa [nat.cast_pos, card_pos] },
  rw [div_le_div_iff hs' hs'', ‚Üêsum_filter_add_sum_filter_not s (Œª j : Œ±, k ‚â§ f j), add_mul,
    ‚Üêle_sub_iff_add_le', ‚Üêmul_sub, ‚Üêcast_card_sdiff (filter_subset _ s), mul_comm],
  have h‚ÇÅ : ‚àë i in s.filter (Œª x, ¬¨k ‚â§ f x), f i ‚â§ (s.filter (Œª x, ¬¨ k ‚â§ f x)).card * k,
  { rw [‚Üênsmul_eq_mul],
    refine sum_le_card_nsmul _ _ _ _,
    simp [le_of_lt] {contextual := tt} },
  have h‚ÇÇ : ((s.filter (Œª x, k ‚â§ f x)).card : ‚Ñù) * k ‚â§ ‚àë i in s.filter (Œª j, k ‚â§ f j), f i,
  { rw [‚Üênsmul_eq_mul],
    refine card_nsmul_le_sum _ _ _ _,
    simp [le_of_lt] {contextual := tt} },
  refine (mul_le_mul_of_nonneg_left h‚ÇÅ (nat.cast_nonneg _)).trans _,
  refine (mul_le_mul_of_nonneg_right h‚ÇÇ (nat.cast_nonneg _)).trans' _,
  rw [‚Üêfilter_not, mul_right_comm, mul_assoc],
end

lemma col_density_eq_average {i : fin 2} {X Y : finset V} :
  col_density œá i X Y = (‚àë x in X, (col_neighbors œá i x ‚à© Y).card / Y.card) / X.card :=
by rw [col_density_eq_sum, ‚Üêsum_div, div_div, mul_comm]

lemma six_four_degree {Œº : ‚Ñù} (hi : i ‚àà degree_steps Œº k l ini) :
  p_ i ‚â§ p_ (i + 1) :=
begin
  change red_density œá _ _ ‚â§ red_density œá _ _,
  rw [degree_regularisation_applied hi, book_config.degree_regularisation_step_X,
    book_config.degree_regularisation_step_Y],
  set C := algorithm Œº k l ini i,
  set Œ± := Œ±_function k (height k ini.p C.p),
  rw col_density_eq_average,
  have : C.X.filter (Œª x, (C.p - k ^ (1 / 8 : ‚Ñù) * Œ±) * C.Y.card ‚â§
    ((col_neighbors œá 0 x ‚à© C.Y).card)) = C.X.filter (Œª x, C.p - k ^ (1 / 8 : ‚Ñù) * Œ± ‚â§
    (col_neighbors œá 0 x ‚à© C.Y).card / C.Y.card),
  { refine filter_congr _,
    intros x hx,
    rw le_div_iff,
    rw [nat.cast_pos, card_pos],
    refine Y_nonempty _,
    rw [degree_steps, mem_filter, mem_range] at hi,
    exact hi.1 },
  rw this,
  rw col_density_eq_average,
  refine increase_average _,
  rw [‚Üêcol_density_eq_average, book_config.p, sub_le_self_iff],
  exact mul_nonneg (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _) (Œ±_nonneg _ _),
end

lemma book_config.get_book_snd_nonempty {V : Type*} [decidable_eq V] {œá} {Œº : ‚Ñù} (hŒº‚ÇÄ : 0 < Œº)
  {X : finset V} (hX : X.nonempty) :
  (book_config.get_book œá Œº X).2.nonempty :=
begin
  rw [‚Üêcard_pos, ‚Üê@nat.cast_pos ‚Ñù],
  refine book_config.get_book_relative_card.trans_lt' _,
  refine div_pos (mul_pos (pow_pos hŒº‚ÇÄ _) _) two_pos,
  rwa [nat.cast_pos, card_pos],
end

lemma six_four_blue' {Œº : ‚Ñù} (hŒº‚ÇÄ : 0 < Œº) (hi : i + 1 ‚àà big_blue_steps Œº k l ini) :
  p_ i - k ^ (1 / 8 : ‚Ñù) * Œ±_function k (height k ini.p (p_ i)) ‚â§ p_ (i + 2) :=
begin
  change _ ‚â§ red_density œá _ _,
  rw [big_blue_applied hi, book_config.big_blue_step_X, book_config.big_blue_step_Y],
  have h : i + 1 < final_step Œº k l ini,
  { rw [big_blue_steps, mem_filter, mem_range] at hi,
    exact hi.1 },
  have hi' : i ‚àà degree_steps Œº k l ini,
  { rw [big_blue_steps, mem_filter, nat.even_add_one, not_not] at hi,
    rw [degree_steps, mem_filter, mem_range],
    exact ‚ü®h.trans_le' (nat.le_succ _), hi.2.1‚ü© },
  rw [degree_regularisation_applied hi', book_config.degree_regularisation_step_Y,
    ‚Üêdegree_regularisation_applied hi'],
  rw [col_density_eq_average],
  let C := algorithm Œº k l ini i,
  let C' := algorithm Œº k l ini (i + 1),
  have : ‚àÄ x ‚àà (C'.big_blue_step Œº).X, C.p - k ^ (1 / 8 : ‚Ñù) * Œ±_function k (height k ini.p C.p) ‚â§
    (red_neighbors œá x ‚à© C.Y).card / C.Y.card,
  { intros x hx,
    have : x ‚àà (algorithm Œº k l ini (i + 1)).X := book_config.get_book_snd_subset hx,
    rw [degree_regularisation_applied hi', book_config.degree_regularisation_step_X,
      mem_filter] at this,
    rw [le_div_iff],
    { exact this.2 },
    rw [nat.cast_pos, card_pos],
    refine Y_nonempty _,
    exact h.trans_le' (nat.le_succ _) },
  refine (div_le_div_of_le _ (card_nsmul_le_sum _ _ _ this)).trans' _,
  { exact nat.cast_nonneg _ },
  rw [book_config.big_blue_step_X, nsmul_eq_mul, mul_div_cancel_left],
  rw [nat.cast_ne_zero, ‚Üêpos_iff_ne_zero, card_pos],
  refine book_config.get_book_snd_nonempty hŒº‚ÇÄ _,
  exact X_nonempty h,
end

lemma six_four_blue {Œº : ‚Ñù} (hŒº‚ÇÄ : 0 < Œº) (hi : i ‚àà big_blue_steps Œº k l ini) :
  (algorithm Œº k l ini (i - 1)).p -
    k ^ (1 / 8 : ‚Ñù) * Œ±_function k (height k ini.p (algorithm Œº k l ini (i - 1)).p) ‚â§
    (algorithm Œº k l ini (i + 1)).p :=
begin
  have hi' := hi,
  rw [big_blue_steps, mem_filter, ‚Üênat.odd_iff_not_even, odd_iff_exists_bit1] at hi,
  obtain ‚ü®b, rfl‚ü© := hi.2.1,
  refine six_four_blue' hŒº‚ÇÄ _,
  rw [bit1, nat.add_sub_cancel],
  exact hi'
end

lemma height_mono {p‚ÇÄ p‚ÇÅ p‚ÇÇ : ‚Ñù} (hk : k ‚â† 0) (h : p‚ÇÅ ‚â§ p‚ÇÇ) :
  height k p‚ÇÄ p‚ÇÅ ‚â§ height k p‚ÇÄ p‚ÇÇ :=
begin
  refine height_min hk _ _,
  { rw ‚Üêpos_iff_ne_zero,
    exact one_le_height },
  exact h.trans (height_spec hk),
end

lemma six_five_density (Œº‚ÇÅ p‚ÇÄl : ‚Ñù) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) (hp‚ÇÄl : 0 < p‚ÇÄl) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº ‚â§ Œº‚ÇÅ ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ ini : book_config œá, p‚ÇÄl ‚â§ ini.p ‚Üí
  ‚àÄ i : ‚Ñï, i ‚àà density_steps Œº k l ini ‚Üí
  height k ini.p (algorithm Œº k l ini i).p ‚â§ height k ini.p (algorithm Œº k l ini (i + 1)).p :=
begin
  filter_upwards [six_four_density Œº‚ÇÅ p‚ÇÄl hŒº‚ÇÅ hp‚ÇÄl, top_adjuster (eventually_ne_at_top 0)] with
    l hl hk' k hlk Œº hŒºu n œá ini hini i hi,
  exact height_mono (hk' _ hlk) (hl k hlk Œº hŒºu n œá ini hini i hi)
end

lemma six_five_degree :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ ini : book_config œá,
  ‚àÄ i : ‚Ñï, i ‚àà degree_steps Œº k l ini ‚Üí
  height k ini.p (algorithm Œº k l ini i).p ‚â§ height k ini.p (algorithm Œº k l ini (i + 1)).p :=
begin
  filter_upwards [top_adjuster (eventually_ne_at_top 0)] with l hk' k hlk Œº n œá ini i hi,
  exact height_mono (hk' _ hlk) (six_four_degree hi),
end

open_locale topology

lemma six_five_red_aux :
  ‚àÄ·∂† x : ‚Ñù in ùìù[‚â•] 0, x * (1 + x) ^ 2 + 1 ‚â§ (1 + x) ^ 2 :=
begin
  rw eventually_nhds_within_iff,
  filter_upwards [eventually_le_nhds (show (0 : ‚Ñù) < 1 / 2, by norm_num)] with x hx‚ÇÇ hx‚ÇÄ,
  rw set.mem_Ici at hx‚ÇÄ,
  rw ‚Üêsub_nonpos,
  ring_nf,
  refine mul_nonpos_of_nonpos_of_nonneg _ hx‚ÇÄ,
  rw [sub_nonpos, add_one_mul],
  nlinarith
end

lemma six_five_red_aux_glue :
  ‚àÄ·∂† k : ‚Ñï in at_top,
    (k : ‚Ñù) ^ (-(1 / 4) : ‚Ñù) * (1 + k ^ (- (1 / 4) : ‚Ñù)) ^ 2 + 1 ‚â§
      (1 + (k : ‚Ñù) ^ (-(1 / 4) : ‚Ñù)) ^ 2 :=
begin
  suffices : tendsto (Œª k : ‚Ñï, (k : ‚Ñù) ^ (-(1 / 4) : ‚Ñù)) at_top (ùìù[‚â•] 0),
  { exact this.eventually six_five_red_aux },
  rw tendsto_nhds_within_iff,
  refine ‚ü®(tendsto_rpow_neg_at_top (by norm_num)).comp tendsto_coe_nat_at_top_at_top, _‚ü©,
  refine eventually_of_forall _,
  intros x,
  exact rpow_nonneg_of_nonneg (nat.cast_nonneg _) _,
end

lemma nat.cast_sub_le {x y : ‚Ñï} : (x - y : ‚Ñù) ‚â§ (x - y : ‚Ñï) :=
by rw [sub_le_iff_le_add, ‚Üênat.cast_add, nat.cast_le, ‚Üêtsub_le_iff_right]

lemma six_five_red :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ ini : book_config œá,
  ‚àÄ i : ‚Ñï, i ‚àà red_steps Œº k l ini ‚Üí
  height k ini.p (algorithm Œº k l ini i).p - 2 ‚â§ height k ini.p (algorithm Œº k l ini (i + 1)).p :=
begin
  filter_upwards [top_adjuster (eventually_ne_at_top 0),
    top_adjuster six_five_red_aux_glue] with
    l hk' hk'' k hlk Œº n œá ini i hi,
  set p := (algorithm Œº k l ini i).p,
  set h := height k ini.p p,
  specialize hk' k hlk,
  cases lt_or_le h 4 with hh hh,
  { rw nat.lt_succ_iff at hh,
    rw tsub_le_iff_right,
    refine hh.trans _,
    rw [nat.succ_le_succ_iff, nat.succ_le_succ_iff],
    exact one_le_height },
  suffices ht : q_function k ini.p (h - 3) < (algorithm Œº k l ini (i + 1)).p,
  { by_contra' ht',
    rw [lt_tsub_iff_right, nat.lt_iff_add_one_le, add_assoc, ‚Üêbit1, ‚Üêle_tsub_iff_right] at ht',
    swap,
    { exact hh.trans' (nat.le_succ _) },
    have := (q_increasing ht').trans_lt ht,
    exact this.not_le (height_spec hk') },
  refine (six_four_red hi).trans_lt' _,
  have : q_function k ini.p (h - 1) < p, { exact q_height_lt_p (hh.trans_lt' (by norm_num)) },
  refine (sub_lt_sub_right this _).trans_le' _,
  change q_function _ _ _ ‚â§ _ - Œ±_function _ h,
  rw [q_function, q_function, add_sub_assoc, add_le_add_iff_left, Œ±_function, ‚Üêsub_div],
  refine div_le_div_of_le (nat.cast_nonneg _) _,
  rw [le_sub_iff_add_le', add_sub_assoc', sub_le_sub_iff_right, neg_div],
  have : h - 1 = (h - 3) + 2,
  { rw [nat.sub_eq_iff_eq_add, add_assoc, ‚Üêbit1, nat.sub_add_cancel],
    { exact hh.trans' (nat.le_succ _) },
    { exact hh.trans' (by norm_num) } },
  rw [this, add_comm _ 2, pow_add, ‚Üêmul_assoc, ‚Üêadd_one_mul],
  refine mul_le_mul_of_nonneg_right _ (pow_nonneg (by positivity) _),
  exact hk'' k hlk,
end

lemma general_convex_thing {a x : ‚Ñù} (hx : 0 ‚â§ x) (hxa : x ‚â§ a) (ha : a ‚â† 0) :
  exp x ‚â§ 1 + (exp a - 1) * x / a :=
begin
  have h‚ÇÅ : 0 ‚â§ x / a := div_nonneg hx (hx.trans hxa),
  have h‚ÇÇ : 0 ‚â§ 1 - x / a,
  { rw sub_nonneg,
    exact div_le_one_of_le hxa (hx.trans hxa) },
  have := convex_on_exp.2 (set.mem_univ 0) (set.mem_univ a) h‚ÇÇ h‚ÇÅ (by simp),
  simp only [ha, smul_eq_mul, mul_zero, div_mul_cancel, ne.def, not_false_iff, zero_add,
    real.exp_zero, mul_one] at this,
  refine this.trans_eq _,
  ring_nf,
end

lemma general_convex_thing' {a x : ‚Ñù} (hx : x ‚â§ 0) (hxa : a ‚â§ x) (ha : a ‚â† 0) :
  exp x ‚â§ 1 + (exp a - 1) * x / a :=
begin
  have h‚ÇÅ : 0 ‚â§ x / a := div_nonneg_of_nonpos hx (hx.trans' hxa),
  have h‚ÇÇ : 0 ‚â§ 1 - x / a,
  { rwa [sub_nonneg, div_le_one_of_neg],
    exact lt_of_le_of_ne (hxa.trans hx) ha },
  have := convex_on_exp.2 (set.mem_univ 0) (set.mem_univ a) h‚ÇÇ h‚ÇÅ (by simp),
  simp only [ha, smul_eq_mul, mul_zero, div_mul_cancel, ne.def, not_false_iff, zero_add,
    real.exp_zero, mul_one] at this,
  refine this.trans_eq _,
  ring_nf,
end

lemma convex_thing_aux {x : ‚Ñù} (hŒµ : 0 ‚â§ x) (hx' : x ‚â§ 2 / 7) :
  exp (-(7 * log 2 / 4 * x)) ‚â§ 1 - 7 / 2 * (1 - 1 / sqrt 2) * x :=
begin
  have h' : (0 : ‚Ñù) < log 2 := log_pos (by norm_num),
  let a := - log 2 / 2,
  have : - log 2 / 2 ‚â† 0,
  { norm_num },
  refine (general_convex_thing' _ _ this).trans_eq _,
  { rw [neg_nonpos],
    positivity },
  { nlinarith },
  have : exp (-log 2 / 2) = 1 / sqrt 2,
  { rw [div_eq_mul_one_div, neg_mul, real.exp_neg, exp_mul, exp_log, rpow_div_two_eq_sqrt,
      rpow_one, one_div];
    norm_num },
  rw [this, neg_div, mul_div_assoc, neg_div, ‚Üêdiv_neg, neg_neg, div_div_eq_mul_div,
    sub_eq_add_neg _ (_ * _ : ‚Ñù), add_right_inj, div_mul_eq_mul_div, div_mul_eq_mul_div, div_div,
    mul_right_comm _ (log 2), mul_right_comm _ (log 2), mul_div_mul_right _ _ h'.ne', ‚Üêneg_mul,
    ‚Üêmul_neg, neg_sub, mul_right_comm (7 / 2 : ‚Ñù), mul_comm, mul_right_comm (7 : ‚Ñù),
    ‚Üêdiv_mul_eq_mul_div],
  congr' 2,
  norm_num1
end

lemma convex_thing {x : ‚Ñù} (hŒµ : 0 ‚â§ x) (hŒµ' : x ‚â§ 2 / 7) :
  exp (-(7 * log 2 / 4 * x)) ‚â§ 1 - x :=
begin
  refine (convex_thing_aux hŒµ hŒµ').trans _,
  rw sub_le_sub_iff_left,
  refine le_mul_of_one_le_left hŒµ _,
  rw [‚Üêdiv_le_iff', le_sub_comm, one_div],
  swap, { norm_num1 },
  refine inv_le_of_inv_le (by norm_num) _,
  refine le_sqrt_of_sq_le _,
  norm_num,
end

lemma six_five_blue_aux :
  ‚àÄ·∂† x : ‚Ñù in ùìù 0, 0 < x ‚Üí (1 + x ^ 2) ^ (-‚åä2 * x‚Åª¬π‚åã‚Çä : ‚Ñù) ‚â§ 1 - x :=
begin
  have h‚ÇÅ := tendsto_inv_zero_at_top.const_mul_at_top (show (0 : ‚Ñù) < 2, by norm_num),
  have h‚ÇÇ := h‚ÇÅ.eventually (eventually_le_floor (7 / 8) (by norm_num)),
  rw eventually_nhds_within_iff at h‚ÇÇ,
  filter_upwards [h‚ÇÇ, eventually_lt_nhds (show (0 : ‚Ñù) < 1, by norm_num),
    eventually_le_nhds (show (0 : ‚Ñù) < 2 / 7, by norm_num)] with x hŒµ hŒµ‚ÇÅ hŒµ‚ÇÇ‚Çá
    hŒµ‚ÇÄ,
  specialize hŒµ hŒµ‚ÇÄ,
  have : 7 / (4 * x) ‚â§ ‚åä2 * x‚Åª¬π‚åã‚Çä,
  { refine hŒµ.trans_eq' _,
    rw [‚Üêdiv_div, div_eq_mul_inv, ‚Üêmul_assoc],
    norm_num },
  have h‚ÇÉ : 1 < 1 + x ^ 2,
  { rw lt_add_iff_pos_right,
    exact pow_pos hŒµ‚ÇÄ _ },
  have h‚ÇÑ : 0 < 1 + x ^ 2 := zero_lt_one.trans h‚ÇÉ,
  rw [‚Üêlog_le_log (rpow_pos_of_pos h‚ÇÑ _) (sub_pos_of_lt hŒµ‚ÇÅ), log_rpow h‚ÇÑ, neg_mul, neg_le],
  refine (mul_le_mul this (mul_log_two_le_log_one_add (pow_nonneg hŒµ‚ÇÄ.le _) _) (mul_nonneg
    (pow_nonneg hŒµ‚ÇÄ.le _) (log_nonneg one_lt_two.le)) (nat.cast_nonneg _)).trans' _,
  { exact pow_le_one _ hŒµ‚ÇÄ.le hŒµ‚ÇÅ.le },
  have : 7 / (4 * x) * (x ^ 2 * log 2) = (7 * log 2 / 4) * x,
  { rw [div_mul_eq_mul_div, div_mul_eq_mul_div, ‚Üêmul_assoc, mul_right_comm, sq, ‚Üêmul_assoc,
      mul_div_mul_right _ _ hŒµ‚ÇÄ.ne'] },
  rw [this, neg_le, le_log_iff_exp_le (sub_pos_of_lt hŒµ‚ÇÅ)],
  exact convex_thing hŒµ‚ÇÄ.le hŒµ‚ÇÇ‚Çá,
end

lemma six_five_blue (Œº‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ ini : book_config œá,
  ‚àÄ i : ‚Ñï, i ‚àà big_blue_steps Œº k l ini ‚Üí
  (height k ini.p (algorithm Œº k l ini (i - 1)).p : ‚Ñù) - 2 * (k : ‚Ñù) ^ (1 / 8 : ‚Ñù) ‚â§
    height k ini.p (algorithm Œº k l ini (i + 1)).p :=
begin
  have : tendsto (Œª k : ‚Ñï, (k : ‚Ñù) ^ (-(1 / 8) : ‚Ñù)) at_top (ùìù 0) :=
    (tendsto_rpow_neg_at_top (by norm_num)).comp tendsto_coe_nat_at_top_at_top,
  filter_upwards [top_adjuster (eventually_gt_at_top 0),
    top_adjuster (this.eventually six_five_blue_aux)] with
    l hk‚ÇÄ hkŒµ k hlk Œº hŒºl n œá ini i hi,
  specialize hk‚ÇÄ k hlk,
  set p := (algorithm Œº k l ini (i - 1)).p,
  set h := height k ini.p p,
  have hk : (0 : ‚Ñù) ‚â§ k ^ (1 / 8 : ‚Ñù) := (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _),
  have hk' : (0 : ‚Ñù) ‚â§ 2 * k ^ (1 / 8 : ‚Ñù) := mul_nonneg two_pos.le hk,
  cases le_or_lt ((h : ‚Ñù) - 2 * k ^ (1 / 8 : ‚Ñù)) 1 with hh hh,
  { refine hh.trans _,
    rw nat.one_le_cast,
    exact one_le_height },
  have : q_function k ini.p (h - 1) < p,
  { refine q_height_lt_p _,
    rw ‚Üê@nat.one_lt_cast ‚Ñù,
    refine hh.trans_le _,
    rw [sub_le_self_iff],
    exact hk' },
  change (h : ‚Ñù) - _ ‚â§ _,
  rw [sub_le_iff_le_add, ‚Üênat.le_floor_iff, add_comm, nat.floor_add_nat hk', ‚Üêtsub_le_iff_left],
  rotate,
  { exact add_nonneg (nat.cast_nonneg _) hk' },
  have z : 1 ‚â§ h - ‚åä2 * (k : ‚Ñù) ^ (1 / 8 : ‚Ñù)‚åã‚Çä,
  { rw [nat.succ_le_iff],
    refine nat.sub_pos_of_lt _,
    rw [nat.floor_lt hk', ‚Üêsub_pos],
    exact hh.trans_le' zero_le_one },
  suffices ht : q_function k ini.p (h - ‚åä2 * (k : ‚Ñù) ^ (1 / 8 : ‚Ñù)‚åã‚Çä - 1) <
    (algorithm Œº k l ini (i + 1)).p,
  { by_contra' ht',
    rw [nat.lt_iff_add_one_le, ‚Üêle_tsub_iff_right z] at ht',
    have := (q_increasing ht').trans_lt ht,
    exact this.not_le (height_spec hk‚ÇÄ.ne') },
  refine (six_four_blue (hŒº‚ÇÄ.trans_le hŒºl) hi).trans_lt' _,
  refine (sub_lt_sub_right this _).trans_le' _,
  rw [Œ±_function, q_function, q_function, add_sub_assoc, add_le_add_iff_left, mul_div_assoc',
    ‚Üêsub_div],
  refine div_le_div_of_le (nat.cast_nonneg _) _,
  have hz : (0 : ‚Ñù) < 1 + Œµ,
  { exact add_pos_of_pos_of_nonneg zero_lt_one (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _) },
  rw [sub_sub, add_comm (1 : ‚Ñù) (_ * _), ‚Üêsub_sub, sub_le_sub_iff_right, ‚Üêmul_assoc, ‚Üêone_sub_mul,
    tsub_tsub, add_comm _ 1, ‚Üêtsub_tsub, pow_sub‚ÇÄ, mul_comm],
  rotate,
  { exact hz.ne' },
  { rw [‚Üê@nat.cast_le ‚Ñù],
    refine (nat.floor_le hk').trans _,
    refine nat.cast_sub_le.trans' _,
    rw [nat.cast_one, le_sub_comm],
    exact hh.le },
  refine mul_le_mul_of_nonneg_right _ (pow_nonneg hz.le _),
  let ŒΩ : ‚Ñù := k ^ (-(1 / 8) : ‚Ñù),
  suffices : (1 + ŒΩ ^ 2) ^ (-‚åä2 * ŒΩ‚Åª¬π‚åã‚Çä : ‚Ñù) ‚â§ 1 - ŒΩ,
  { convert this using 2,
    { rw [‚Üêrpow_nat_cast, ‚Üêrpow_neg hz.le, ‚Üêrpow_neg (nat.cast_nonneg _), neg_neg,
        ‚Üêrpow_two, ‚Üêrpow_mul (nat.cast_nonneg _)],
      norm_num },
    rw [‚Üêrpow_add' (nat.cast_nonneg _)],
    { congr' 1,
      norm_num1 },
    norm_num1 },
  exact hkŒµ k hlk (rpow_pos_of_pos (nat.cast_pos.2 hk‚ÇÄ) _),
end

/-- the set of steps on which p is below p‚ÇÄ and decreases in two steps -/
noncomputable def decrease_steps (Œº : ‚Ñù) (k l : ‚Ñï) (ini : book_config œá) : finset ‚Ñï :=
  (red_steps Œº k l ini ‚à™ big_blue_steps Œº k l ini ‚à™ density_steps Œº k l ini).filter
    (Œª i, (algorithm Œº k l ini (i + 1)).p < (algorithm Œº k l ini (i - 1)).p ‚àß
          (algorithm Œº k l ini (i - 1)).p ‚â§ ini.p)

lemma sub_one_mem_degree {Œº : ‚Ñù} {i : ‚Ñï} (hi : i < final_step Œº k l ini) (hi' : odd i) :
  1 ‚â§ i ‚àß i - 1 ‚àà degree_steps Œº k l ini :=
begin
  rw odd_iff_exists_bit1 at hi',
  obtain ‚ü®i, rfl‚ü© := hi',
  refine ‚ü®by simp, _‚ü©,
  rw [bit1, nat.add_sub_cancel, degree_steps, mem_filter, mem_range],
  exact ‚ü®hi.trans_le' (nat.le_succ _), even_bit0 _‚ü©,
end

lemma big_blue_steps_sub_one_mem_degree {Œº : ‚Ñù} {i : ‚Ñï} (hi : i ‚àà big_blue_steps Œº k l ini) :
  1 ‚â§ i ‚àß i - 1 ‚àà degree_steps Œº k l ini :=
begin
  rw [big_blue_steps, mem_filter, mem_range, ‚Üênat.odd_iff_not_even] at hi,
  exact sub_one_mem_degree hi.1 hi.2.1,
end

lemma red_or_density_steps_sub_one_mem_degree {Œº : ‚Ñù} {i : ‚Ñï}
  (hi : i ‚àà red_or_density_steps Œº k l ini) :
  1 ‚â§ i ‚àß i - 1 ‚àà degree_steps Œº k l ini :=
begin
  rw [red_or_density_steps, mem_filter, mem_range, ‚Üênat.odd_iff_not_even] at hi,
  exact sub_one_mem_degree hi.1 hi.2.1,
end

lemma red_steps_sub_one_mem_degree {Œº : ‚Ñù} {i : ‚Ñï} (hi : i ‚àà red_steps Œº k l ini) :
  1 ‚â§ i ‚àß i - 1 ‚àà degree_steps Œº k l ini :=
red_or_density_steps_sub_one_mem_degree (red_steps_subset_red_or_density_steps hi)

lemma density_steps_sub_one_mem_degree {Œº : ‚Ñù} {i : ‚Ñï} (hi : i ‚àà density_steps Œº k l ini) :
  1 ‚â§ i ‚àß i - 1 ‚àà degree_steps Œº k l ini :=
red_or_density_steps_sub_one_mem_degree (density_steps_subset_red_or_density_steps hi)

lemma height_eq_one {p‚ÇÄ p : ‚Ñù} (h : p ‚â§ p‚ÇÄ) : height k p‚ÇÄ p = 1 :=
begin
  apply five_seven_extra,
  rw [q_function, pow_one, add_sub_cancel'],
  refine h.trans _,
  simp only [le_add_iff_nonneg_right],
  positivity
end

lemma six_three_blue (Œº‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá,
  ‚àë i in (big_blue_steps Œº k l ini).filter
    (Œª i, (algorithm Œº k l ini (i + 1)).p < (algorithm Œº k l ini (i - 1)).p ‚àß
          (algorithm Œº k l ini (i - 1)).p ‚â§ ini.p),
    ((algorithm Œº k l ini (i - 1)).p - (algorithm Œº k l ini (i + 1)).p) ‚â§
    Œµ :=
begin
  filter_upwards [top_adjuster (eventually_ge_at_top 1),
    four_three hŒº‚ÇÄ] with l hl‚ÇÅ hb
    k hlk Œº hŒºl n œá hœá ini,
  let BZ := (big_blue_steps Œº k l ini).filter
    (Œª i, (algorithm Œº k l ini (i + 1)).p < (algorithm Œº k l ini (i - 1)).p ‚àß
          (algorithm Œº k l ini (i - 1)).p ‚â§ ini.p),
  change ‚àë i in BZ, _ ‚â§ _,
  have : ‚àÄ i ‚àà BZ, (algorithm Œº k l ini (i - 1)).p - (algorithm Œº k l ini (i + 1)).p ‚â§ 1 / k,
  { intros i hi,
    rw [mem_filter] at hi,
    have : height k ini.p (algorithm Œº k l ini (i - 1)).p = 1,
    { refine height_eq_one _,
      exact hi.2.2 },
    have h' := six_four_blue (hŒº‚ÇÄ.trans_le hŒºl) hi.1,
    rw [this, sub_le_comm] at h',
    refine h'.trans _,
    rw [Œ±_one, mul_div_assoc'],
    refine div_le_div_of_le (nat.cast_nonneg _) _,
    rw ‚Üêrpow_add' (nat.cast_nonneg _),
    refine rpow_le_one_of_one_le_of_nonpos (nat.one_le_cast.2 (hl‚ÇÅ k hlk)) (by norm_num),
    norm_num },
  refine (sum_le_card_nsmul _ _ _ this).trans _,
  rw [nsmul_eq_mul, mul_one_div],
  have : (BZ.card : ‚Ñù) ‚â§ l ^ (3 / 4 : ‚Ñù),
  { refine (hb k hlk Œº hŒºl n œá hœá ini).trans' _,
    rw nat.cast_le,
    exact card_le_of_subset (filter_subset _ _) },
  refine (div_le_div_of_le _ this).trans _,
  { exact nat.cast_nonneg _ },
  have : (0 : ‚Ñù) < k,
  { rwa nat.cast_pos,
    exact hl‚ÇÅ k hlk },
  rw [div_le_iff this, ‚Üêrpow_add_one this.ne'],
  exact (rpow_le_rpow (nat.cast_nonneg _) (nat.cast_le.2 hlk) (by norm_num)).trans_eq (by norm_num)
end

lemma p‚ÇÄ_lt_of_one_lt_height {k : ‚Ñï} {p‚ÇÄ p : ‚Ñù} (h : 1 < height k p‚ÇÄ p) :
  p‚ÇÄ < p :=
begin
  by_contra',
  rw height_eq_one this at h,
  simpa using h
end

lemma six_three_red_aux :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ‚àÄ ini : book_config œá,
  ‚àÄ i ‚àà red_steps Œº k l ini,
    (algorithm Œº k l ini (i + 1)).p < (algorithm Œº k l ini (i - 1)).p ‚Üí
    (algorithm Œº k l ini (i - 1)).p ‚â§ ini.p ‚Üí
    ((algorithm Œº k l ini (i - 1)).p - (algorithm Œº k l ini (i + 1)).p) ‚â§
    Œµ / k :=
begin
  filter_upwards [top_adjuster (eventually_ge_at_top 1)] with l hl‚ÇÅ
    k hlk Œº n œá ini i hi hi‚ÇÅ hi‚ÇÇ,
  refine (sub_le_sub_left (six_four_red hi) _).trans _,
  cases eq_or_lt_of_le one_le_height,
  { rw [‚Üêsub_add, ‚Üêh, Œ±_one, add_le_iff_nonpos_left, sub_nonpos],
    have := red_steps_sub_one_mem_degree hi,
    refine (six_four_degree this.2).trans_eq _,
    rw nat.sub_add_cancel this.1 },
  have m := p‚ÇÄ_lt_of_one_lt_height h,
  have : q_function k ini.p 0 ‚â§ (algorithm Œº k l ini i).p,
  { rw q_function_zero,
    exact m.le },
  refine (sub_le_sub_right hi‚ÇÇ _).trans _,
  rw ‚Üêsub_add,
  refine (add_le_add_left (five_seven_right this) _).trans _,
  rw [q_function_zero, mul_add, mul_one_div, ‚Üêadd_assoc, add_le_iff_nonpos_left,
    ‚Üêle_neg_iff_add_nonpos_left, neg_sub],
  refine mul_le_of_le_one_left _ _,
  { rw sub_nonneg,
    exact m.le },
  refine rpow_le_one_of_one_le_of_nonpos _ (by norm_num),
  rw nat.one_le_cast,
  exact hl‚ÇÅ k hlk
end

lemma six_three_red :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá,
  ‚àë i in (red_steps Œº k l ini).filter
    (Œª i, (algorithm Œº k l ini (i + 1)).p < (algorithm Œº k l ini (i - 1)).p ‚àß
          (algorithm Œº k l ini (i - 1)).p ‚â§ ini.p),
    ((algorithm Œº k l ini (i - 1)).p - (algorithm Œº k l ini (i + 1)).p) ‚â§
    Œµ :=
begin
  filter_upwards [eventually_gt_at_top 0, six_three_red_aux] with l hl‚ÇÄ hlr
    k hlk Œº n œá hœá ini,
  let RZ := (red_steps Œº k l ini).filter
    (Œª i, (algorithm Œº k l ini (i + 1)).p < (algorithm Œº k l ini (i - 1)).p ‚àß
          (algorithm Œº k l ini (i - 1)).p ‚â§ ini.p),
  change ‚àë i in RZ, (_ : ‚Ñù) ‚â§ _,
  have : ‚àÄ i ‚àà RZ, (algorithm Œº k l ini (i - 1)).p - (algorithm Œº k l ini (i + 1)).p ‚â§
    Œµ / k,
  { intros i hi,
    simp only [RZ, mem_filter] at hi,
    exact hlr k hlk Œº n œá ini i hi.1 hi.2.1 hi.2.2 },
  refine (sum_le_card_nsmul _ _ _ this).trans _,
  have : (RZ.card : ‚Ñù) ‚â§ k,
  { rw nat.cast_le,
    refine (card_le_of_subset (filter_subset _ _)).trans _,
    exact four_four_red Œº hœá ini },
  rw [nsmul_eq_mul],
  refine (mul_le_mul_of_nonneg_right this _).trans_eq _,
  { positivity },
  rw mul_div_cancel',
  rw nat.cast_ne_zero,
  exact (hl‚ÇÄ.trans_le hlk).ne',
end

lemma six_three (Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº‚ÇÄ) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí Œº ‚â§ Œº‚ÇÅ ‚Üí
  ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àë i in decrease_steps Œº k l ini,
    ((algorithm Œº k l ini (i - 1)).p - (algorithm Œº k l ini (i + 1)).p) ‚â§
    2 * Œµ :=
begin
  filter_upwards [six_four_density Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    six_three_red, six_three_blue Œº‚ÇÄ hŒº‚ÇÄ] with l hld hlr hlb
    k hlk Œº hŒºl hŒºu n œá hœá ini hini,
  specialize hlr k hlk Œº n œá hœá ini,
  specialize hlb k hlk Œº hŒºl n œá hœá ini,
  have : (density_steps Œº k l ini).filter
    (Œª i, (algorithm Œº k l ini (i + 1)).p < (algorithm Œº k l ini (i - 1)).p ‚àß
          (algorithm Œº k l ini (i - 1)).p ‚â§ ini.p) = ‚àÖ,
  { rw filter_eq_empty_iff,
    intros i hi,
    rw [not_and_distrib, not_lt],
    left,
    refine (hld k hlk Œº hŒºu n œá ini hini i hi).trans' _,
    have := density_steps_sub_one_mem_degree hi,
    refine (six_four_degree this.2).trans _,
    rw nat.sub_add_cancel this.1 },
  rw [decrease_steps, filter_union, this, union_empty, filter_union, sum_union],
  { clear this,
    refine (add_le_add hlr hlb).trans_eq _,
    rw two_mul },
  clear this hlr hlb,
  refine disjoint_filter_filter _,
  refine big_blue_steps_disjoint_red_or_density_steps.symm.mono_left _,
  exact red_steps_subset_red_or_density_steps
end

lemma Œ±_increasing {h‚ÇÅ h‚ÇÇ : ‚Ñï} (hh : h‚ÇÅ ‚â§ h‚ÇÇ) : Œ±_function k h‚ÇÅ ‚â§ Œ±_function k h‚ÇÇ :=
begin
  refine div_le_div_of_le (nat.cast_nonneg _) _,
  refine mul_le_mul_of_nonneg_left _ (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _),
  refine pow_le_pow _ _,
  { rw [le_add_iff_nonneg_right],
    exact rpow_nonneg_of_nonneg (nat.cast_nonneg _) _ },
  exact nat.sub_le_sub_right hh _,
end

lemma six_four_weak_aux : ‚àÄ·∂† k : ‚Ñù in at_top, ‚àÄ h : ‚Ñï, 1 ‚â§ h ‚Üí
    (1 + k ^ (- 1 / 4 : ‚Ñù)) ^ (h + 2 - 1) ‚â§
      k ^ (1 / 8 : ‚Ñù) * (1 + k ^ (- 1 / 4 : ‚Ñù)) ^ (h - 1) :=
begin
  have h‚ÇÑ := tendsto_rpow_neg_at_top (show (0 : ‚Ñù) < 1 / 4, by norm_num),
  have h‚Çà := tendsto_rpow_at_top (show (0 : ‚Ñù) < 1 / 8, by norm_num),
  have := eventually_le_nhds (show (0 : ‚Ñù) < 1 / 4, by norm_num),
  filter_upwards [eventually_ge_at_top (0 : ‚Ñù), h‚ÇÑ.eventually this,
    h‚Çà.eventually_ge_at_top 2] with k hk‚ÇÄ hk‚ÇÑ hk‚Çà h hh,
  rw [nat.sub_add_comm hh, pow_add, mul_comm, neg_div],
  have : 0 ‚â§ 1 + k ^ -(1 / 4 : ‚Ñù),
  { exact le_add_of_nonneg_of_le zero_le_one (rpow_nonneg_of_nonneg hk‚ÇÄ _) },
  refine mul_le_mul_of_nonneg_right _ (pow_nonneg this _),
  refine hk‚Çà.trans' _,
  refine (pow_le_pow_of_le_left this (add_le_add_left hk‚ÇÑ _) _).trans _,
  norm_num
end

lemma six_four_weak (Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº‚ÇÄ) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí Œº ‚â§ Œº‚ÇÅ ‚Üí
  ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2), ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àÄ i : ‚Ñï, i ‚àà red_steps Œº k l ini ‚à™ big_blue_steps Œº k l ini ‚à™ density_steps Œº k l ini ‚Üí
  p_ (i + 1) ‚â§ ini.p ‚Üí
  p_ (i - 1) - k ^ (1 / 8 : ‚Ñù) * Œ±_function k (height k ini.p (p_ (i - 1))) ‚â§ p_ (i + 1) :=
begin
  filter_upwards [six_four_density Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ, six_five_red,
    top_adjuster (tendsto_coe_nat_at_top_at_top.eventually six_four_weak_aux)] with l hl hr hk
    k hlk Œº hŒºl hŒºu n œá ini hini i hi hi',
  simp only [mem_union, or_assoc] at hi,
  rcases hi with (hir | hib | his),
  rotate,
  { exact six_four_blue (hŒº‚ÇÄ.trans_le hŒºl) hib },
  { refine (hl k hlk Œº hŒºu n œá ini hini i his).trans' _,
    rw sub_le_iff_le_add,
    have := density_steps_sub_one_mem_degree his,
    refine (six_four_degree this.2).trans _,
    rw [nat.sub_add_cancel this.1, le_add_iff_nonneg_right],
    exact mul_nonneg (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _) (Œ±_nonneg _ _) },
  refine (six_four_red hir).trans' _,
  have hirs := red_steps_sub_one_mem_degree hir,
  have := six_four_degree hirs.2,
  rw nat.sub_add_cancel hirs.1 at this,
  refine sub_le_sub this _,
  have := hr k hlk Œº n œá ini i hir,
  rw [height_eq_one hi', tsub_le_iff_right] at this,
  have : height k ini.p (algorithm Œº k l ini i).p ‚â§
    height k ini.p (algorithm Œº k l ini (i - 1)).p + 2,
  { refine this.trans _,
    rw add_le_add_iff_right,
    exact one_le_height },
  refine (Œ±_increasing this).trans _,
  rw [Œ±_function, Œ±_function, mul_div_assoc'],
  refine div_le_div_of_le (nat.cast_nonneg _) _,
  rw [mul_left_comm],
  refine mul_le_mul_of_nonneg_left _ (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _),
  exact hk _ hlk _ one_le_height,
end

lemma six_two_part_one {f : ‚Ñï ‚Üí ‚Ñù}
  {j j' : ‚Ñï} (hj : odd j) (hj' : odd j') (hjj : j' ‚â§ j) :
  f (j' + 1) - f (j + 1) = ‚àë i in (finset.Icc (j' + 2) j).filter odd, (f (i - 1) - f (i + 1)) :=
begin
  rw odd_iff_exists_bit1 at hj hj',
  obtain ‚ü®j, rfl‚ü© := hj,
  obtain ‚ü®j', rfl‚ü© := hj',
  rw bit1_le_bit1 at hjj,
  have : (Icc (bit1 j' + 2) (bit1 j)).filter odd =
    (Icc (j' + 1) j).map ‚ü®(bit1 : ‚Ñï ‚Üí ‚Ñï), Œª i i', nat.bit1_inj‚ü©,
  { ext i,
    simp only [mem_filter, mem_Icc, finset.mem_map, odd_iff_exists_bit1, bit1, exists_prop,
      function.embedding.coe_fn_mk, and_assoc],
    split,
    { rintro ‚ü®hi, hi', i, rfl‚ü©,
      simp only [add_le_add_iff_right, bit0_le_bit0] at hi',
      rw [add_right_comm, add_le_add_iff_right, ‚Üêbit0_add, bit0_le_bit0] at hi,
      exact ‚ü®i, hi, hi', rfl‚ü© },
    rintro ‚ü®i, hi, hi', rfl‚ü©,
    rw [add_right_comm, add_le_add_iff_right, add_le_add_iff_right, bit0_le_bit0,
      ‚Üêbit0_add, bit0_le_bit0],
    exact ‚ü®hi, hi', i, rfl‚ü© },
  rw [this, sum_map, ‚Üênat.Ico_succ_right, sum_Ico_eq_sum_range, nat.succ_sub_succ],
  have : ‚àÄ k : ‚Ñï, (f (bit1 (j' + 1 + k) - 1) - f (bit1 (j' + 1 + k) + 1)) =
    f (bit0 (j' + 1 + k)) - f (bit0 (j' + 1 + (k + 1))),
  { intro k,
    rw [bit1, nat.add_sub_cancel, add_assoc _ 1 1, ‚Üêbit0, ‚Üêbit0_add, add_assoc (j' + 1)] },
  dsimp,
  simp only [this],
  rw [sum_range_sub', add_zero, bit1, bit1, add_assoc, add_assoc, ‚Üêbit0, ‚Üêbit0_add, ‚Üêbit0_add,
    add_assoc, add_left_comm, add_tsub_cancel_of_le hjj, add_comm j],
end

lemma sum_le_of_nonneg {Œ± : Type*} {f : Œ± ‚Üí ‚Ñù} {s : finset Œ±} :
  ‚àë x in s, f x ‚â§ ‚àë x in s.filter (Œª i, 0 < f i), f x :=
begin
  rw [‚Üêsum_filter_add_sum_filter_not s (Œª i, 0 < f i), add_le_iff_nonpos_right],
  exact sum_nonpos (by simp {contextual := tt})
end

lemma mem_union_of_odd {Œº : ‚Ñù} {i : ‚Ñï} (hi : odd i) (hi' : i < final_step Œº k l ini) :
  i ‚àà red_steps Œº k l ini ‚à™ ‚Ñ¨ ‚à™ ùíÆ :=
begin
  rw [union_right_comm, red_steps_union_density_steps, union_comm, big_blue_steps,
    red_or_density_steps, ‚Üêfilter_or, mem_filter, mem_range, ‚Üêand_or_distrib_left, ‚Üênot_lt,
    and_iff_left (em' _), ‚Üênat.odd_iff_not_even, and_iff_left hi],
  exact hi'
end

lemma six_two_part_two {Œº : ‚Ñù} {k l : ‚Ñï} {ini : book_config œá}
  {j j' : ‚Ñï} (hjm : j < final_step Œº k l ini)
  (hij : ‚àÄ i : ‚Ñï, j' + 1 ‚â§ i ‚Üí i ‚â§ j ‚Üí odd i ‚Üí p_ (i - 1) ‚â§ ini.p) :
  ‚àë i in (finset.Icc (j' + 2) j).filter odd, (p_ (i - 1) - p_ (i + 1)) ‚â§
    ‚àë i in decrease_steps Œº k l ini, (p_ (i - 1) - p_ (i + 1)) :=
begin
  have : ‚àë i in (finset.Icc (j' + 2) j).filter odd, (p_ (i - 1) - p_ (i + 1)) ‚â§
    ‚àë i in (finset.Icc (j' + 2) j).filter (Œª i, odd i ‚àß p_ (i + 1) < p_ (i - 1)),
      (p_ (i - 1) - p_ (i + 1)),
  { rw [‚Üêfilter_filter],
    refine sum_le_of_nonneg.trans_eq _,
    simp only [sub_pos] },
  refine this.trans _,
  clear this,
  refine sum_le_sum_of_subset_of_nonneg _ _,
  swap,
  { simp only [mem_filter, nat.odd_iff_not_even, mem_Icc, not_and, not_le, and_imp, sub_nonneg,
      decrease_steps],
    intros i _ h _ _,
    exact h.le },
  intros i,
  simp only [mem_filter, decrease_steps, and_imp, mem_Icc],
  intros hi hi‚ÇÅ hi‚ÇÇ hi‚ÇÉ,
  refine ‚ü®_, hi‚ÇÉ, _‚ü©,
  { exact mem_union_of_odd hi‚ÇÇ (hi‚ÇÅ.trans_lt hjm) },
  exact hij i (hi.trans' (nat.le_succ _)) hi‚ÇÅ hi‚ÇÇ,
end

lemma six_two_part_three (Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº‚ÇÄ) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí Œº ‚â§ Œº‚ÇÅ ‚Üí
  ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àÄ j : ‚Ñï, j < final_step Œº k l ini ‚Üí odd j ‚Üí
  (algorithm Œº k l ini (j + 1)).p ‚â§ ini.p ‚Üí ini.p ‚â§ (algorithm Œº k l ini (j - 1)).p ‚Üí
  ini.p - Œµ ‚â§ (algorithm Œº k l ini (j + 1)).p :=
begin
  filter_upwards [six_four_weak Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    top_adjuster (eventually_ge_at_top 1)] with l hl hl‚ÇÅ
    k hlk Œº hŒºl hŒºu n œá hœá ini hini j hj hj‚ÇÅ hj‚ÇÇ hj‚ÇÉ,
  have : j ‚àà red_steps Œº k l ini ‚à™ big_blue_steps Œº k l ini ‚à™ density_steps Œº k l ini :=
    mem_union_of_odd hj‚ÇÅ hj,
  refine (hl k hlk Œº hŒºl hŒºu n œá ini hini j this hj‚ÇÇ).trans' _,
  have hj‚ÇÑ : q_function k ini.p 0 ‚â§ (algorithm Œº k l ini (j - 1)).p,
  { rw q_function_zero,
    exact hj‚ÇÉ },
  rw [le_sub_comm],
  refine (mul_le_mul_of_nonneg_left (five_seven_right hj‚ÇÑ) (rpow_nonneg_of_nonneg
    (nat.cast_nonneg _) _)).trans _,
  rw [q_function_zero, ‚Üêmul_assoc, ‚Üêsub_add, mul_add],
  refine add_le_add _ _,
  { refine mul_le_of_le_one_left (sub_nonneg_of_le hj‚ÇÉ) _,
    rw [‚Üêrpow_add' (nat.cast_nonneg _)],
    refine rpow_le_one_of_one_le_of_nonpos (nat.one_le_cast.2 (hl‚ÇÅ k hlk)) (by norm_num),
    norm_num1 },
  rw mul_right_comm,
  refine mul_le_of_le_one_left (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _) _,
  rw [mul_one_div, ‚Üêrpow_sub_one],
  { exact rpow_le_one_of_one_le_of_nonpos (nat.one_le_cast.2 (hl‚ÇÅ k hlk)) (by norm_num) },
  rw [nat.cast_ne_zero, ‚Üêpos_iff_ne_zero],
  exact hl‚ÇÅ k hlk
end

lemma six_two_main (Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº‚ÇÄ) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí Œº ‚â§ Œº‚ÇÅ ‚Üí ‚àÄ n : ‚Ñï,
  ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àÄ i : ‚Ñï, i < final_step Œº k l ini ‚Üí i ‚àâ ùíü ‚Üí
  ini.p - 3 * Œµ ‚â§ p_ (i + 1) :=
begin
  filter_upwards [six_three Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    six_two_part_three Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ] with l hl hl'
    k hlk Œº hŒºl hŒºu n œá hœá ini hini j hj hj‚ÇÅ,
  cases le_or_lt ini.p (p_ (j + 1)),
  { refine h.trans' _,
    rw [sub_le_self_iff],
    positivity },
  dsimp at h,
  have hj‚ÇÇ : odd j,
  { rw [degree_steps, mem_filter, mem_range] at hj‚ÇÅ,
    simpa only [hj, true_and, ‚Üênat.odd_iff_not_even] using hj‚ÇÅ },
  let js := (range (j + 1)).filter (Œª j', odd j' ‚àß ini.p ‚â§ p_ (j' - 1)),
  have hjs : js.nonempty,
  { rw [filter_nonempty_iff],
    refine ‚ü®1, _, odd_one, _‚ü©,
    { simp only [mem_range, lt_add_iff_pos_left],
      exact hj‚ÇÇ.pos },
    dsimp,
    rw [nat.sub_self, algorithm_zero] },
  let j' : ‚Ñï := js.max' hjs,
  have hj' : j' ‚â§ j ‚àß odd j' ‚àß ini.p ‚â§ p_ (j' - 1),
  { simpa only [mem_filter, mem_range_succ_iff, and_imp] using finset.max'_mem _ hjs },
  have : ‚àÄ i : ‚Ñï, j' + 1 ‚â§ i ‚Üí i ‚â§ j ‚Üí odd i ‚Üí p_ (i - 1) ‚â§ ini.p,
  { intros i hi‚ÇÅ hi‚ÇÇ hi‚ÇÉ,
    by_contra' hi‚ÇÑ,
    have : i ‚àà js,
    { rw [mem_filter, mem_range_succ_iff],
      exact ‚ü®hi‚ÇÇ, hi‚ÇÉ, hi‚ÇÑ.le‚ü© },
    rw nat.succ_le_iff at hi‚ÇÅ,
    exact (finset.le_max' _ _ this).not_lt hi‚ÇÅ },
  dsimp at this,
  have p_first : p_ (j' + 1) - 2 * Œµ ‚â§ p_ (j + 1),
  { rw [sub_le_comm, six_two_part_one hj‚ÇÇ hj'.2.1 hj'.1],
    refine (six_two_part_two hj this).trans _,
    exact hl k hlk Œº hŒºl hŒºu n œá hœá ini hini },
  refine p_first.trans' _,
  have : p_ (j' + 1) ‚â§ ini.p,
  { cases eq_or_lt_of_le hj'.1 with hjj hjj,
    { rw hjj,
      exact h.le },
    rw ‚Üênat.add_one_le_iff at hjj,
    refine this (j' + 2) (nat.le_succ _) _ (by simp [hj'] with parity_simps),
    cases eq_or_lt_of_le hjj with hjj' hjj',
    { rw [‚Üêhjj'] at hj‚ÇÇ,
      simp only [nat.odd_iff_not_even] at hj‚ÇÇ,
      refine (hj‚ÇÇ _).elim,
      simpa with parity_simps using hj'.2.1 },
    rw nat.add_one_le_iff,
    exact hjj' },
  refine (sub_le_sub_right
    (hl' k hlk Œº hŒºl hŒºu n œá hœá ini hini j' (hj'.1.trans_lt hj) hj'.2.1 this hj'.2.2) _).trans' _,
  rw [bit1, add_one_mul, sub_sub, add_comm],
end

lemma six_two (Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº‚ÇÄ) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí Œº ‚â§ Œº‚ÇÅ ‚Üí
  ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àÄ i : ‚Ñï, i ‚â§ final_step Œº k l ini ‚Üí ini.p - 3 * Œµ ‚â§ p_ i :=
begin
  filter_upwards [six_two_main Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ] with l hl
    k hlk Œº hŒºl hŒºu n œá hœá ini hini i hi,
  cases i,
  { rw [algorithm_zero, sub_le_self_iff],
    positivity },
  rw nat.succ_eq_add_one at hi ‚ä¢,
  rw nat.succ_le_iff at hi,
  by_cases i ‚àà ùíü,
  { refine (six_four_degree h).trans' _,
    rw [degree_steps, mem_filter, even_iff_exists_two_mul, mem_range] at h,
    obtain ‚ü®(rfl | i), rfl‚ü© := h.2,
    { dsimp,
      rw [mul_zero, algorithm_zero, sub_le_self_iff],
      positivity },
    have : 2 * i.succ = bit1 i + 1,
    { rw [nat.mul_succ, bit1, ‚Üêbit0_eq_two_mul, add_assoc] },
    rw this at *,
    refine hl k hlk Œº hŒºl hŒºu n œá hœá ini hini (bit1 i) _ _,
    { exact hi.trans_le' (nat.le_succ _) },
    rw [degree_steps, mem_filter],
    simp },
  exact hl k hlk Œº hŒºl hŒºu n œá hœá ini hini i hi h
end

lemma two_approx {x : ‚Ñù} (hx : 0 ‚â§ x) (hx' : x ‚â§ 1 / 2) :
  2 ^ (-2 * x) ‚â§ 1 - x :=
begin
  have p : - 2 * log 2 ‚â§ 0, { simp [log_nonneg one_le_two] },
  have hu‚ÇÄ : x * (- 2 * log 2) ‚â§ 0 := mul_nonpos_of_nonneg_of_nonpos hx p,
  have hu‚ÇÅ : - log 2 ‚â§ x * (- 2 * log 2), { nlinarith },
  have := general_convex_thing' hu‚ÇÄ hu‚ÇÅ (neg_ne_zero.2 (log_pos one_lt_two).ne'),
  rw [‚Üêmul_assoc, ‚Üêmul_assoc, div_neg, mul_div_cancel _ (log_pos one_lt_two).ne', ‚Üêsub_eq_add_neg,
    mul_comm, ‚Üêrpow_def_of_pos zero_lt_two, mul_comm] at this,
  refine this.trans_eq _,
  rw [real.exp_neg, exp_log],
  { norm_num,
    rw [mul_comm, mul_one_div, mul_div_cancel_left],
    norm_num1 },
  norm_num1
end

lemma six_one_ind (Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº‚ÇÄ) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí
  ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí Œº ‚â§ Œº‚ÇÅ ‚Üí
  ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àÄ i, i ‚â§ final_step Œº k l ini ‚Üí
  ((1 - (k : ‚Ñù) ^ (- 1 / 8 : ‚Ñù)) * (ini.p - 3 * Œµ)) ^
    (red_or_density_steps Œº k l ini ‚à© range i).card *
    ini.Y.card ‚â§ (algorithm Œº k l ini i).Y.card :=
begin
  have h‚ÇÑ : (0 : ‚Ñù) < 1 / 4 := by norm_num,
  have t : tendsto (coe : ‚Ñï ‚Üí ‚Ñù) at_top at_top := tendsto_coe_nat_at_top_at_top,
  filter_upwards [top_adjuster (((tendsto_rpow_neg_at_top h‚ÇÑ).comp t).eventually
    (eventually_le_nhds (show 0 < p‚ÇÄ / 3, by positivity))),
    top_adjuster (eventually_ge_at_top 1),
    top_adjuster (t.eventually_ge_at_top p‚ÇÄ‚Åª¬π),
    six_two Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ] with l hl hl' hl‚ÇÇ hl‚ÇÉ
    k hlk Œº hŒºl hŒºu n œá hœá ini hini i hi,
  induction i with i ih,
  { rw [nat.nat_zero_eq_zero, range_zero, inter_empty, card_empty,
      pow_zero, one_mul, algorithm_zero] },
  rw [nat.succ_le_iff] at hi,
  have hi' := hi,
  rw [‚Üêmem_range, ‚Üêunion_partial_steps, mem_union, mem_union, or_assoc, or_rotate] at hi',
  rw [range_succ],
  rcases hi' with hib | hid | hirs,
  { have hi'' := finset.disjoint_left.1 big_blue_steps_disjoint_red_or_density_steps hib,
    rw [inter_insert_of_not_mem hi''],
    refine (ih hi.le).trans_eq _,
    rw [big_blue_applied hib, book_config.big_blue_step_Y] },
  { have hi'' := finset.disjoint_left.1
      degree_steps_disjoint_big_blue_steps_union_red_or_density_steps hid,
    rw [mem_union, not_or_distrib] at hi'',
    rw [inter_insert_of_not_mem hi''.2],
    refine (ih hi.le).trans_eq _,
    rw [degree_regularisation_applied hid, book_config.degree_regularisation_step_Y] },
  rw [inter_insert_of_mem hirs, card_insert_of_not_mem, pow_succ, mul_assoc],
  swap,
  { simp },
  have hk‚Çà : (0 : ‚Ñù) ‚â§ 1 - k ^ (-1 / 8 : ‚Ñù),
  { rw [sub_nonneg],
    refine rpow_le_one_of_one_le_of_nonpos _ (by norm_num),
    rw nat.one_le_cast,
    exact hl' k hlk },
  refine (mul_le_mul_of_nonneg_left (ih hi.le) (mul_nonneg _ _)).trans _,
  { exact hk‚Çà },
  { rw [sub_nonneg],
    refine hini.trans' _,
    rw [‚Üêle_div_iff', neg_div],
    { exact hl k hlk },
    norm_num1 },
  have hd : 1 ‚â§ i ‚àß i - 1 ‚àà degree_steps Œº k l ini := red_or_density_steps_sub_one_mem_degree hirs,
  have : (algorithm Œº k l ini i.succ).Y = red_neighbors œá (get_x hirs) ‚à© (algorithm Œº k l ini i).Y,
  { rw [‚Üêred_steps_union_density_steps, mem_union] at hirs,
    cases hirs with hir his,
    { rw [red_applied hir, book_config.red_step_basic_Y] },
    { rw [density_applied his, book_config.density_boost_step_basic_Y] } },
  rw this,
  have hp‚ÇÄ' : (1 : ‚Ñù) / k ‚â§ ini.p,
  { refine hini.trans' _,
    rw [one_div],
    exact inv_le_of_inv_le hp‚ÇÄ (hl‚ÇÇ k hlk) },
  have := five_eight hp‚ÇÄ' hd.2 (get_x hirs),
  rw nat.sub_add_cancel hd.1 at this,
  refine (this (book_config.get_central_vertex_mem_X _ _ _)).trans' _,
  refine mul_le_mul_of_nonneg_right _ (nat.cast_nonneg _),
  refine mul_le_mul_of_nonneg_left _ hk‚Çà,
  exact hl‚ÇÉ k hlk Œº hŒºl hŒºu n œá hœá ini hini (i - 1) ((nat.sub_le _ _).trans hi.le),
end

lemma six_one_ind_rearranged (Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ : ‚Ñù) (hŒº‚ÇÄ : 0 < Œº‚ÇÄ) (hŒº‚ÇÅ : Œº‚ÇÅ < 1) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí
  ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí Œº ‚â§ Œº‚ÇÅ ‚Üí
  ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àÄ i, i ‚â§ final_step Œº k l ini ‚Üí
  ((1 - (k : ‚Ñù) ^ (- 1 / 8 : ‚Ñù)) * (1 - 3 * Œµ / ini.p)) ^ (2 * k) *
    ini.p ^ ((red_steps Œº k l ini ‚à© range i).card + (density_steps Œº k l ini ‚à© range i).card) *
    ini.Y.card ‚â§ (algorithm Œº k l ini i).Y.card :=
begin
  have h‚ÇÖ : (0 : ‚Ñù) < 1 / 4 := by norm_num,
  have h‚ÇÜ :=
    ((tendsto_rpow_neg_at_top h‚ÇÖ).comp tendsto_coe_nat_at_top_at_top).eventually
    (eventually_le_nhds (show 0 < p‚ÇÄ / 3, by positivity)),
  filter_upwards [six_one_ind Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ,
    top_adjuster (eventually_gt_at_top 0), top_adjuster h‚ÇÜ] with l hl hl‚ÇÄ hl'
    k hlk Œº hŒºl hŒºu n œá hœá ini hini i hi,
  specialize hl k hlk Œº hŒºl hŒºu n œá hœá ini hini i hi,
  refine hl.trans' (mul_le_mul_of_nonneg_right _ (nat.cast_nonneg _)),
  have h‚ÇÅ : (red_steps Œº k l ini ‚à© range i).card + (density_steps Œº k l ini ‚à© range i).card ‚â§ 2 * k,
  { rw [two_mul],
    refine add_le_add _ _,
    { refine (card_le_of_subset (inter_subset_left _ _)).trans _,
      exact (four_four_red Œº hœá ini) },
    { refine (card_le_of_subset (inter_subset_left _ _)).trans _,
      have := (four_four_blue_density Œº (hl‚ÇÄ _ hlk).ne' (hl‚ÇÄ _ le_rfl).ne' hœá ini),
      exact hlk.trans' (this.trans' le_add_self) } },
  have h‚ÇÇ : (red_steps Œº k l ini ‚à© range i).card + (density_steps Œº k l ini ‚à© range i).card =
    (red_or_density_steps Œº k l ini ‚à© range i).card,
  { rw [‚Üêcard_union_eq, ‚Üêred_steps_union_density_steps, inter_distrib_right],
    exact red_steps_disjoint_density_steps.mono (inter_subset_left _ _) (inter_subset_left _ _) },
  have hp‚ÇÄ' : 0 < ini.p := hp‚ÇÄ.trans_le hini,
  have h‚ÇÉ : (0 : ‚Ñù) ‚â§ 1 - k ^ (-1 / 8 : ‚Ñù),
  { refine sub_nonneg_of_le (rpow_le_one_of_one_le_of_nonpos _ (by norm_num1)),
    rw [nat.one_le_cast],
    exact hl‚ÇÄ k hlk },
  have h‚ÇÑ : (0 : ‚Ñù) ‚â§ 1 - 3 * k ^ (-1 / 4 : ‚Ñù) / ini.p,
  { rw [sub_nonneg],
    refine div_le_one_of_le (hini.trans' _) hp‚ÇÄ'.le,
    rw [‚Üêle_div_iff', neg_div],
    { exact hl' k hlk },
    norm_num1 },
  refine (mul_le_mul_of_nonneg_right (pow_le_pow_of_le_one _ _ h‚ÇÅ) _).trans _,
  { refine mul_nonneg h‚ÇÉ h‚ÇÑ },
  { refine mul_le_one _ h‚ÇÑ _,
    { rw [sub_le_self_iff],
      positivity },
    { rw [sub_le_self_iff],
      positivity } },
  { exact pow_nonneg hp‚ÇÄ'.le _ },
  rw [h‚ÇÇ, ‚Üêmul_pow, mul_assoc, one_sub_mul _ ini.p, div_mul_cancel _ hp‚ÇÄ'.ne'],
end

open asymptotics

lemma six_one_error (p‚ÇÄ : ‚Ñù) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÉ f : ‚Ñï ‚Üí ‚Ñù, f =o[at_top] (Œª i, (i : ‚Ñù)) ‚àß
  ‚àÄ·∂† k : ‚Ñï in at_top,
  ‚àÄ p, p‚ÇÄ ‚â§ p ‚Üí
  (2 : ‚Ñù) ^ f k ‚â§ ((1 - (k : ‚Ñù) ^ (- 1 / 8 : ‚Ñù)) * (1 - 3 * Œµ / p)) ^ (2 * k) :=
begin
  let g : ‚Ñù ‚Üí ‚Ñù := (Œª k, -2 * k ^ (-1 / 8 : ‚Ñù) - 2 * (3 * k ^ (-1 / 4 : ‚Ñù) / p‚ÇÄ)),
  refine ‚ü®Œª k : ‚Ñï, g k * (2 * k), _, _‚ü©,
  { suffices : g =o[at_top] (Œª x, (1 : ‚Ñù)),
    { have := this.comp_tendsto tendsto_coe_nat_at_top_at_top,
      refine (this.mul_is_O (is_O_const_mul_self (2 : ‚Ñù) _ at_top)).congr_right _,
      simp only [one_mul, eq_self_iff_true, forall_const]},
    refine asymptotics.is_o.sub _ _,
    { refine is_o.const_mul_left _ _,
      simpa using is_o_rpow_rpow (show - 1 / 8 < (0 : ‚Ñù), by norm_num) },
    { simp_rw [div_eq_mul_one_div (_ * _), mul_comm _ (1 / p‚ÇÄ), ‚Üêmul_assoc],
      refine is_o.const_mul_left _ _,
      simpa using is_o_rpow_rpow (show - 1 / 4 < (0 : ‚Ñù), by norm_num) } },
  have t : tendsto (coe : ‚Ñï ‚Üí ‚Ñù) at_top at_top := tendsto_coe_nat_at_top_at_top,
  have h‚Çà := tendsto_rpow_neg_at_top (show (0 : ‚Ñù) < 1 / 8, by norm_num),
  have h‚ÇÑ := tendsto_rpow_neg_at_top (show (0 : ‚Ñù) < 1 / 4, by norm_num),
  filter_upwards [((h‚ÇÑ.comp t).eventually
      (eventually_le_nhds (show 0 < p‚ÇÄ / (2 * 3), by positivity))),
    ((h‚Çà.comp t).eventually (eventually_le_nhds (show (0 : ‚Ñù) < 1 / 2, by norm_num)))]
    with k hk‚ÇÑ hk‚Çà p hp,
  rw [rpow_mul, ‚Üênat.cast_two, ‚Üênat.cast_mul, nat.cast_two, rpow_nat_cast],
  swap,
  { exact two_pos.le },
  refine pow_le_pow_of_le_left (rpow_nonneg_of_nonneg two_pos.le _) _ _,
  have h‚ÇÅ : (2 : ‚Ñù) ^ (-2 * (k : ‚Ñù) ^ (- 1 / 8 : ‚Ñù)) ‚â§ 1 - (k : ‚Ñù) ^ (-1 / 8 : ‚Ñù),
  { refine two_approx (rpow_nonneg_of_nonneg (nat.cast_nonneg _) _) _,
    rw [neg_div],
    exact hk‚Çà },
  have h‚ÇÇ : (2 : ‚Ñù) ^ (-2 * (3 * (k : ‚Ñù) ^ (-1 / 4 : ‚Ñù) / p‚ÇÄ)) ‚â§
    1 - 3 * (k : ‚Ñù) ^ (-1 / 4 : ‚Ñù) / p,
  { refine (two_approx (by positivity) _).trans _,
    { rw [div_le_iff' hp‚ÇÄ, mul_one_div, ‚Üêle_div_iff', div_div, neg_div],
      { exact hk‚ÇÑ },
      { norm_num1 } },
    rw [sub_le_sub_iff_left],
    exact div_le_div_of_le_left (by positivity) hp‚ÇÄ hp },
  refine (mul_le_mul h‚ÇÅ h‚ÇÇ (rpow_nonneg_of_nonneg two_pos.le _) _).trans_eq' _,
  { exact h‚ÇÅ.trans' (rpow_nonneg_of_nonneg two_pos.le _) },
  rw [‚Üêrpow_add two_pos, neg_mul _ (_ / _), ‚Üêsub_eq_add_neg],
end

lemma six_one_general (p‚ÇÄ : ‚Ñù) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÉ f : ‚Ñï ‚Üí ‚Ñù, f =o[at_top] (Œª i, (i : ‚Ñù)) ‚àß
  ‚àÄ Œº‚ÇÄ Œº‚ÇÅ : ‚Ñù, 0 < Œº‚ÇÄ ‚Üí Œº‚ÇÅ < 1 ‚Üí
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí
  ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí Œº ‚â§ Œº‚ÇÅ ‚Üí
  ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  ‚àÄ i, i ‚â§ final_step Œº k l ini ‚Üí
  (2 : ‚Ñù) ^ f k *
    ini.p ^ ((red_steps Œº k l ini ‚à© range i).card + (density_steps Œº k l ini ‚à© range i).card) *
    ini.Y.card ‚â§ (algorithm Œº k l ini i).Y.card :=
begin
  obtain ‚ü®f, hf, hf'‚ü© := six_one_error p‚ÇÄ hp‚ÇÄ,
  refine ‚ü®f, hf, _‚ü©,
  intros Œº‚ÇÄ Œº‚ÇÅ hŒº‚ÇÄ hŒº‚ÇÅ,
  filter_upwards [top_adjuster hf', six_one_ind_rearranged Œº‚ÇÄ Œº‚ÇÅ p‚ÇÄ hŒº‚ÇÄ hŒº‚ÇÅ hp‚ÇÄ] with l hl hl'
    k hlk Œº hŒºl hŒºu n œá hœá ini hini i hi,
  specialize hl' k hlk Œº hŒºl hŒºu n œá hœá ini hini i hi,
  specialize hl k hlk ini.p hini,
  refine hl'.trans' _,
  rw [mul_assoc, mul_assoc],
  refine mul_le_mul_of_nonneg_right hl (mul_nonneg _ (nat.cast_nonneg _)),
  exact pow_nonneg col_density_nonneg _,
end

lemma six_one (p‚ÇÄ : ‚Ñù) (hp‚ÇÄ : 0 < p‚ÇÄ) :
  ‚àÉ f : ‚Ñï ‚Üí ‚Ñù, f =o[at_top] (Œª i, (i : ‚Ñù)) ‚àß
  ‚àÄ Œº‚ÇÄ Œº‚ÇÅ : ‚Ñù, 0 < Œº‚ÇÄ ‚Üí Œº‚ÇÅ < 1 ‚Üí
  ‚àÄ·∂† l : ‚Ñï in at_top, ‚àÄ k, l ‚â§ k ‚Üí ‚àÄ Œº, Œº‚ÇÄ ‚â§ Œº ‚Üí Œº ‚â§ Œº‚ÇÅ ‚Üí
  ‚àÄ n : ‚Ñï, ‚àÄ œá : top_edge_labelling (fin n) (fin 2),
  ¬¨ (‚àÉ (m : finset (fin n)) (c : fin 2), œá.monochromatic_of m c ‚àß ![k, l] c ‚â§ m.card) ‚Üí
  ‚àÄ ini : book_config œá, p‚ÇÄ ‚â§ ini.p ‚Üí
  (2 : ‚Ñù) ^ f k *
    ini.p ^ ((red_steps Œº k l ini).card + (density_steps Œº k l ini).card) *
      ini.Y.card ‚â§ (end_state Œº k l ini).Y.card :=
begin
  obtain ‚ü®f, hf, hf'‚ü© := six_one_general p‚ÇÄ hp‚ÇÄ,
  refine ‚ü®f, hf, _‚ü©,
  intros Œº‚ÇÄ Œº‚ÇÅ hŒº‚ÇÄ hŒº‚ÇÅ,
  filter_upwards [hf' Œº‚ÇÄ Œº‚ÇÅ hŒº‚ÇÄ hŒº‚ÇÅ] with l hl
    k hlk Œº hŒºl hŒºu n œá hœá ini hini,
  have h‚ÇÅ : red_steps Œº k l ini ‚à© range (final_step Œº k l ini) = red_steps Œº k l ini,
  { rw [inter_eq_left_iff_subset],
    exact red_steps_subset_red_or_density_steps.trans (filter_subset _ _) },
  have h‚ÇÇ : density_steps Œº k l ini ‚à© range (final_step Œº k l ini) = density_steps Œº k l ini,
  { rw [inter_eq_left_iff_subset],
    exact density_steps_subset_red_or_density_steps.trans (filter_subset _ _) },
  specialize hl k hlk Œº hŒºl hŒºu n œá hœá ini hini _ le_rfl,
  rw [h‚ÇÅ, h‚ÇÇ] at hl,
  exact hl
end

end simple_graph
